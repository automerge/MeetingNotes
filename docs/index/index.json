{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Document Model",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/meetingnotes\/appwalkthrough",
            "title" : "Meeting Notes, a Document-based SwiftUI app using Automerge.",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/init(title:)",
                "title" : "init(title: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/agendas",
                "title" : "var agendas: [AgendaItem]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/attendees",
                "title" : "var attendees: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/title",
                "title" : "var title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesmodel",
            "title" : "MeetingNotesModel",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/init(title:discussion:)",
                "title" : "init(title: String, discussion: AutomergeText?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/discussion",
                "title" : "var discussion: AutomergeText",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/id",
                "title" : "let id: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/agendaitem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/agendaitem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/agendaitem",
            "title" : "AgendaItem",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/init(configuration:)",
                "title" : "init(configuration: ReadConfiguration) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/doc",
                "title" : "var doc: Document",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/filedecoder",
                "title" : "let fileDecoder: CBORDecoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/fileencoder",
                "title" : "let fileEncoder: CBOREncoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/id",
                "title" : "let id: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/model",
                "title" : "var model: MeetingNotesModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/modeldecoder",
                "title" : "let modelDecoder: AutomergeDecoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/modelencoder",
                "title" : "let modelEncoder: AutomergeEncoder",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/filewrapper(snapshot:configuration:)",
                "title" : "func fileWrapper(snapshot: Document, configuration: WriteConfiguration) throws -> FileWrapper",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/getmodelupdates()",
                "title" : "func getModelUpdates() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/mergefile(_:)",
                "title" : "func mergeFile(URL) -> Result<Bool, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/snapshot(contenttype:)",
                "title" : "func snapshot(contentType: UTType) throws -> Document",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/storemodelupdates()",
                "title" : "func storeModelUpdates() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/wrappeddocument()",
                "title" : "func wrappedDocument() -> WrappedAutomergeDocument",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/readablecontenttypes",
                "title" : "static var readableContentTypes: [UTType]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/sample()",
                "title" : "static func sample() -> MeetingNotesDocument",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/writablecontenttypes",
                    "title" : "static var writableContentTypes: [UTType]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/referencefiledocument-implementations",
                "title" : "ReferenceFileDocument Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocument",
            "title" : "MeetingNotesDocument",
            "type" : "class"
          },
          {
            "path" : "\/documentation\/meetingnotes\/uniformtypeidentifiers\/uttype\/meetingnote",
            "title" : "static var meetingnote: UTType",
            "type" : "property"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/init(id:data:)",
                "title" : "init(id: UUID, data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/data",
                "title" : "let data: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/id",
                "title" : "let id: UUID",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/filedecoder",
                "title" : "static let fileDecoder: CBORDecoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/fileencoder",
                "title" : "static let fileEncoder: CBOREncoder",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/transferrepresentation",
                    "title" : "static var transferRepresentation: some TransferRepresentation",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/transferable-implementations",
                "title" : "Transferable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument",
            "title" : "WrappedAutomergeDocument",
            "type" : "struct"
          },
          {
            "title" : "Core Application",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/body",
                "title" : "var body: some Scene",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/main()",
                    "title" : "static func main()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/app-implementations",
                "title" : "App Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesapp",
            "title" : "MeetingNotesApp",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/meetingnotes\/sharedsynccoordinator",
            "title" : "let sharedSyncCoordinator: DocumentSyncCoordinator",
            "type" : "var"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdefaultkeys\/sharingidentity",
                "title" : "static let sharingIdentity: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdefaultkeys",
            "title" : "MeetingNotesDefaultKeys",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeerror\/nosharedhistory",
                "title" : "case NoSharedHistory",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeerror",
            "title" : "MergeError",
            "type" : "enum"
          },
          {
            "title" : "Logger extensions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/meetingnotes\/os\/logger\/document",
            "title" : "static let document: Logger",
            "type" : "property"
          },
          {
            "path" : "\/documentation\/meetingnotes\/os\/logger\/synccontroller",
            "title" : "static let syncController: Logger",
            "type" : "property"
          },
          {
            "path" : "\/documentation\/meetingnotes\/os\/logger\/syncconnection",
            "title" : "static let syncConnection: Logger",
            "type" : "property"
          },
          {
            "title" : "Views",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/init(document:undomanager:)",
                "title" : "init(document: MeetingNotesDocument, undoManager: Environment<UndoManager?>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/undomanager",
                "title" : "var undoManager: UndoManager?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(activationpoint:)-4oyml",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(activationpoint:)-84ijp",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-18wam",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-83jjp",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-wziy",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactivationpoint(_:)-3mp7g",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactivationpoint(_:)-7j8kn",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-3215s",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-6vc2k",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-7tavf",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-7ydad",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-80kle",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-87vq",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-8lu8w",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-8t9ub",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-2l4o6",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-585mm",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-etvl",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-1f9vs",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-1p2t7",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-5gn4c",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-1ob1x",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-8z21m",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-9oy6c",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-3j9s6",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-59ola",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-8q1hg",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-9vmq6",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1piu7",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2wlkt",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3x2tx",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-vs05",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-33oif",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-45br2",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-4nymq",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-91xt1",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-18kgo",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-2l02q",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-3pvux",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-khgh",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-2hv6m",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-5957i",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-8em1r",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-21q9t",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-492nm",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-4jamt",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-1rra0",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-3zoeu",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-538dp",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-2q4yz",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-3xucn",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-6jqrj",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-5iixx",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-6b4a3",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-9mrni",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alignmentguide(_:computevalue:)-10qqn",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alignmentguide(_:computevalue:)-40adw",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/aspectratio(_:contentmode:)-3y2zj",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/aspectratio(_:contentmode:)-5qyut",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:in:fillstyle:)-4r7mp",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:in:fillstyle:)-6u74t",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(in:fillstyle:)-4nl5r",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(in:fillstyle:)-92wg5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-25hud",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-2h0v4",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-5prdg",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-8ns7l",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonstyle(_:)-16xin",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonstyle(_:)-8qi63",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1rok1",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4qk9d",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-70nxr",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1dh3f",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3za81",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9ctno",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-172w8",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6g3x3",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7klb3",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1tv8q",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6btzx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7fxjg",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:_:for:)-2u52r",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:_:for:)-3y8tw",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-7jnx9",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-7synr",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-8rci4",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-11nhy",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-1ofq6",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-2xtxg",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-383uc",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-3k6t1",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-6vjca",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1vsoc",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5xb8z",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-2xizz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6r1jt",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-279y4",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9m6re",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-3jukp",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-47ebb",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-51ilu",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-6azsm",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-8i3s2",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedobject(_:)-2nmps",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedobject(_:)-4wp9y",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedsceneobject(_:)-4p4ca",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedsceneobject(_:)-9mn5c",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedscenevalue(_:_:)-17wwq",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedscenevalue(_:_:)-80zzn",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:_:)-2d5bz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:_:)-39k6p",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-12jy",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-14o7z",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-9vrfo",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:)-4mwzj",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:)-6odeo",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-4kv2g",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-56fnt",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-7n91e",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-gkyn",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listitemtint(_:)-3knxy",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listitemtint(_:)-6rbno",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-2q0mc",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-60g3t",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-9m0f2",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-7g36a",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-8v1o2",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-9hzo7",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-4qtip",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-5uzd8",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-lxkz",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-x7ua",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-2cgg7",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-5opsj",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-7my60",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-326tf",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-3dsll",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9mxm9",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9rfux",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9x5dq",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:initial:_:)-5zdpd",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:initial:_:)-9ye9t",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:delegate:)-74o48",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:delegate:)-7a1hv",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-1abiv",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-470hh",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-58hqv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-89fef",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:perform:)-570r9",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:perform:)-9epyc",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:validator:perform:)-4dc30",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:validator:perform:)-736pe",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:)-64idm",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:)-9tued",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/renameaction(_:)-3kdxg",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/renameaction(_:)-71hdr",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareainset(edge:alignment:spacing:content:)-3kv0b",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareainset(edge:alignment:spacing:content:)-btob",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:)-2ios2",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:)-5n3z2",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(_:anchor:)-1lkeb",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(_:anchor:)-9sum2",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1i8wl",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1iqz7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6iuqa",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-1s8u9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-387lv",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-7bgrg",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-2kz9j",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-5zx8u",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-wx6y",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-8valg",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-9cxj3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-9xe64",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-4zco7",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-5qm8y",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-8k5de",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5gyrx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6fcds",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8dql4",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-320ye",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-8ahea",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-8irmr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-12xqd",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2zgvc",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5bvk8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5qutl",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9q5bj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9v451",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(content:)-33ita",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(content:)-iwqc",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-77sbk",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-hb6d",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-jon9",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typesettinglanguage(_:isenabled:)-5a3ha",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typesettinglanguage(_:isenabled:)-804zo",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview",
            "title" : "MeetingNotesDocumentView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/init(document:agendaitemid:)",
                "title" : "init(document: MeetingNotesDocument, agendaItemId: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/agendaitemid",
                "title" : "let agendaItemId: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/undomanager",
                "title" : "var undoManager: UndoManager?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/bindingforagendaitem()",
                "title" : "func bindingForAgendaItem() -> Binding<String>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(activationpoint:)-4bkeq",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(activationpoint:)-9arii",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-1hpbp",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-5aghd",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-b6y9",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactivationpoint(_:)-1h4df",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactivationpoint(_:)-t1ii",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-1f7uk",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-1lu2h",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-36lh3",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-3e033",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-3vvr3",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-67jmb",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-704rp",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-7k32",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-17dsb",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-3hgvg",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-8uw9x",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-44w3x",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-8wszi",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-kktm",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-1bx4s",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-2suti",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-99olz",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-15v9o",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-3g2eg",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-8tavx",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-93ofb",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1ooor",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1tpqp",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-89cxk",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8spe6",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-4i6rr",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-62bqh",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-78kev",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-94yer",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-4mm5l",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-6fob0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-7ae6h",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-7qzj1",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-60u15",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-6884y",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-6sj7e",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-14m1k",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-1y2z7",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-3gued",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-1ve4x",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-2q4ye",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-5014c",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-1bvpz",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-3r9jj",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-5j2e5",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-1o5k",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-5i85o",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-62wf7",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alignmentguide(_:computevalue:)-23bcw",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alignmentguide(_:computevalue:)-2toyl",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/aspectratio(_:contentmode:)-1eizy",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/aspectratio(_:contentmode:)-5e0d3",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:in:fillstyle:)-295ki",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:in:fillstyle:)-32jc4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(in:fillstyle:)-31y6",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(in:fillstyle:)-5vrl7",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-1gkxw",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-34z75",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-89yzn",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-8hgx3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonstyle(_:)-53wd6",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonstyle(_:)-6kpsp",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1ko7s",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4lb0n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8qkrs",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2o52q",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3zrqt",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6vxr8",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1cn0b",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-437f7",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-98bga",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-35tiz",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-43wm6",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8nv6e",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:_:for:)-2q34a",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:_:for:)-4hxr8",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-7j4nf",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-99t0p",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-ibuk",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-6lif7",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-8rxi5",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-94ymj",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-208we",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-7rlzk",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-x6ic",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6cukx",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-76oh9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-17o3c",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5al48",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-10eq8",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-k1gd",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-5qqc4",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-7g3ns",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-18jbc",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-5p6yg",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-8bjkx",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedobject(_:)-1eby5",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedobject(_:)-1x2hx",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedsceneobject(_:)-1r0jj",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedsceneobject(_:)-yulk",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedscenevalue(_:_:)-39a34",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedscenevalue(_:_:)-76nyu",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:_:)-1l028",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:_:)-4r74s",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-35d6i",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-7x8wr",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-8m1e2",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:)-81icf",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:)-8a7wl",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-4ayzz",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-62s5d",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-65tb0",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-7lp3f",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listitemtint(_:)-3pqx1",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listitemtint(_:)-66dtw",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-2r87h",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-38ly3",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-440nr",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-2ukav",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-nqfj",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-yyao",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-2eny5",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-5h6ka",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-5nit",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-7ltu6",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-3xa18",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-7efph",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-9rw5n",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-2qhkc",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-3yvo9",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-43faa",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-4bjjt",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-9o02o",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:initial:_:)-5n1i9",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:initial:_:)-9yzzr",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:delegate:)-1zi6j",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:delegate:)-68agc",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-1qwx5",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-1spct",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-6bg01",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-7t3sk",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:perform:)-84dob",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:perform:)-j62o",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:validator:perform:)-1nkmo",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:validator:perform:)-2im1x",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:)-3nqw8",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:)-4fc2n",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/renameaction(_:)-5d2mn",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/renameaction(_:)-9mcnc",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareainset(edge:alignment:spacing:content:)-4t602",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareainset(edge:alignment:spacing:content:)-7o7a0",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:)-2wwmn",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:)-70szs",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(_:anchor:)-6mz3p",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(_:anchor:)-719h5",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2hgqr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-675f5",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6ppxp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-6f59m",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-6yvnx",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-8qrhs",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-19h61",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-5qaym",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-98125",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-34q43",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-50nwe",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-vfgy",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-4hjqg",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-nvla",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-uiee",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-16sq3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-754gn",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-90ajp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-5ybng",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-77ew1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-7t28k",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4l5g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7fmxp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9bd5n",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2bri",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4fb5c",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8x7z3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(content:)-1fyhr",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(content:)-88wyx",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-51w9x",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-8k3ly",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-9hh78",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typesettinglanguage(_:isenabled:)-2rgwb",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typesettinglanguage(_:isenabled:)-3stpa",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/editableagendaitemview",
            "title" : "EditableAgendaItemView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/init(documentid:synccontroller:result:)",
                "title" : "init(documentId: UUID, syncController: DocumentSyncCoordinator, result: NWBrowser.Result)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/documentid",
                "title" : "var documentId: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/result",
                "title" : "var result: NWBrowser.Result",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/synccontroller",
                "title" : "var syncController: DocumentSyncCoordinator",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/namefromresultmetadata()",
                "title" : "func nameFromResultMetadata() -> String",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/peeridfromresultmetadata()",
                "title" : "func peerIdFromResultMetadata() -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(activationpoint:)-lxpr",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(activationpoint:)-y82h",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaction(named:_:)-4j1wi",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaction(named:_:)-4o0bf",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaction(named:_:)-br0j",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityactivationpoint(_:)-849yk",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityactivationpoint(_:)-91dte",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-14p4r",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-1iaph",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-1sz2p",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-20wlj",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-5yy6s",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-91me3",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-9r6bp",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitycustomcontent(_:_:importance:)-epql",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityhint(_:)-5g0rl",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityhint(_:)-7ro8u",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityhint(_:)-9nmos",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityinputlabels(_:)-4utq2",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityinputlabels(_:)-7l6h4",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityinputlabels(_:)-t7ye",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitylabel(_:)-1jm0d",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitylabel(_:)-574bl",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitylabel(_:)-6iitt",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:)-11pg9",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:)-2ac3f",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:)-74z4l",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:)-8fdcn",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5te4l",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8aqef",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9475u",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9bsp0",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entrylabel:)-3m2kx",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entrylabel:)-494in",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entrylabel:)-9jkrg",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:entries:entrylabel:)-ry2n",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:textranges:)-3nnlg",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:textranges:)-40a6l",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:textranges:)-4qcas",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotor(_:textranges:)-6z5gi",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityvalue(_:)-5bm4b",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityvalue(_:)-6cl3o",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityvalue(_:)-8pxb7",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:)-5g5t2",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:)-8f1ps",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:)-bon2",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:message:)-7gpgz",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:message:)-8m8u3",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:actions:message:)-9jxjv",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:)-4cbw5",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:)-64ejj",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:)-6qrh4",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:message:)-1cog0",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:message:)-cm24",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(_:ispresented:presenting:actions:message:)-yj4l",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alignmentguide(_:computevalue:)-4uk75",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alignmentguide(_:computevalue:)-757gj",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/aspectratio(_:contentmode:)-2e97t",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/aspectratio(_:contentmode:)-7m2ev",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(_:in:fillstyle:)-97nrb",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(_:in:fillstyle:)-lg5s",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(in:fillstyle:)-1k9hg",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/background(in:fillstyle:)-8ghm8",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/badge(_:)-2cp0l",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/badge(_:)-36g8f",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/badge(_:)-6hoiw",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/badge(_:)-8u98",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/buttonstyle(_:)-6mb5t",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/buttonstyle(_:)-83uo7",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4ly8w",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-7uyu4",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8dvnp",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-71hu3",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8pob7",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9bth8",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-68bzh",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7sxtm",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-pvt0",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-12hf5",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4vs1a",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6tbqk",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contentmargins(_:_:for:)-7jtcp",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contentmargins(_:_:for:)-9ef97",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogsuppressiontoggle(_:issuppressed:)-2b3hu",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogsuppressiontoggle(_:issuppressed:)-83riy",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogsuppressiontoggle(_:issuppressed:)-bn6x",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogconfirmationlabel(_:)-14ra",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogconfirmationlabel(_:)-630w2",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogconfirmationlabel(_:)-dqzl",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogmessage(_:)-2egzn",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogmessage(_:)-3q8a9",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogmessage(_:)-824gj",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6eea8",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7e5la",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-217lv",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-3nxrk",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1075y",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-5pas8",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1qgab",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-5kg5t",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporterfilenamelabel(_:)-14hqf",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporterfilenamelabel(_:)-99ejq",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileexporterfilenamelabel(_:)-ww33",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedobject(_:)-182us",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedobject(_:)-71lfq",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedsceneobject(_:)-153lp",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedsceneobject(_:)-2npuw",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedscenevalue(_:_:)-79ctt",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedscenevalue(_:_:)-8ncam",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedvalue(_:_:)-3ig9e",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/focusedvalue(_:_:)-6be7o",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/help(_:)-9ymla",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/help(_:)-q3cd",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/help(_:)-sljz",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyboardshortcut(_:)-7jtog",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyboardshortcut(_:)-7qdpp",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linelimit(_:)-2b8v7",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linelimit(_:)-3md1j",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linelimit(_:)-5oxr9",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linelimit(_:)-7lr8p",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listitemtint(_:)-3dinz",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listitemtint(_:)-838jj",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:)-3jhfv",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:)-3vwfs",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:)-9qill",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:displaymode:)-2xcda",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:displaymode:)-5nz13",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationbartitle(_:displaymode:)-6dc4a",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdocument(_:preview:)-1yvvh",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdocument(_:preview:)-2ggsl",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdocument(_:preview:)-9e78j",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationdocument(_:preview:)-trvn",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsubtitle(_:)-3eibg",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsubtitle(_:)-3y3ve",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationsubtitle(_:)-49wt5",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationtitle(_:)-1rrnt",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationtitle(_:)-2e7mo",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationtitle(_:)-76qls",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationtitle(_:)-iu6r",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationtitle(_:)-u3xr",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onchange(of:initial:_:)-8y4ng",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onchange(of:initial:_:)-t9jz",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:delegate:)-3t0lg",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:delegate:)-803ws",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:istargeted:perform:)-2dwft",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:istargeted:perform:)-31n51",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:istargeted:perform:)-76fex",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ondrop(of:istargeted:perform:)-9k12j",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onpastecommand(of:perform:)-3gdxm",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onpastecommand(of:perform:)-99unp",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onpastecommand(of:validator:perform:)-44xon",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onpastecommand(of:validator:perform:)-5mt9y",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/padding(_:)-31ket",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/padding(_:)-9fxtm",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/renameaction(_:)-6ho9o",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/renameaction(_:)-97cex",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/safeareainset(edge:alignment:spacing:content:)-3f1mn",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/safeareainset(edge:alignment:spacing:content:)-6x0hc",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/safeareapadding(_:)-9igoq",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/safeareapadding(_:)-9mut3",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scaleeffect(_:anchor:)-2mtv6",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scaleeffect(_:anchor:)-vynp",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1oo2t",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-74803",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-9lbyi",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:placement:prompt:token:)-35vsa",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:placement:prompt:token:)-9iuzp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:editabletokens:placement:prompt:token:)-ad7e",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:ispresented:placement:prompt:)-2x6zm",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:ispresented:placement:prompt:)-3giyy",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:ispresented:placement:prompt:)-8php6",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:)-2u4ya",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:)-9gyui",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:)-tn7g",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:suggestions:)-3pkt2",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:suggestions:)-4b5x3",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:placement:prompt:suggestions:)-7ecfs",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-819xc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-89lno",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-kocv",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:placement:prompt:token:)-6c10q",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:placement:prompt:token:)-70w9k",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:placement:prompt:token:)-9huqm",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7258y",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7s1na",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9j25n",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-17vy4",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1cyp2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5zxla",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbar(content:)-13ymy",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbar(content:)-1zpnm",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/typeselectequivalent(_:)-1izzu",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/typeselectequivalent(_:)-7adeb",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/typeselectequivalent(_:)-9czqr",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/typesettinglanguage(_:isenabled:)-11jk7",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/typesettinglanguage(_:isenabled:)-4x2ow",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/nwbrowserresultitemview",
            "title" : "NWBrowserResultItemView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/init(documentid:synccontroller:browseractive:browserstyling:)",
                "title" : "init(documentId: UUID, syncController: DocumentSyncCoordinator, browserActive: Bool, browserStyling: Color)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/browseractive",
                "title" : "var browserActive: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/browserstyling",
                "title" : "var browserStyling: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/documentid",
                "title" : "var documentId: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/synccontroller",
                "title" : "var syncController: DocumentSyncCoordinator",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(activationpoint:)-5j14n",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(activationpoint:)-70uql",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-303qo",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-59pop",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-h2ss",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactivationpoint(_:)-4exop",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactivationpoint(_:)-76p2e",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-17t8y",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-1bqvw",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-1wjpc",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-2zj6n",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-3l3ee",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-3yxs1",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-8axmf",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-9d6ft",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-712d3",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-8ld8t",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-9qv2o",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-4a6pc",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-82xyl",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-8uk17",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-6s39p",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-7otyt",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-7y3hc",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-5cyk5",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-6d65o",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-8kchj",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-zkbp",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1j86u",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-47d5v",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6zyse",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9v0c5",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-2kqp0",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-6vde4",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-72wrc",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-99qn1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-1ki9d",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-1lmpu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-wvd4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-xfvo",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-3bk5y",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-6akvk",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-995fi",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-6nl3y",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-81hho",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-87kna",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-2fyid",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-2ukg3",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-5jzrf",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-41i5v",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-6615m",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-7dmsa",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-186iz",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-6kt2b",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-8bwm5",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alignmentguide(_:computevalue:)-5apor",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alignmentguide(_:computevalue:)-6lakn",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/aspectratio(_:contentmode:)-3ui9",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/aspectratio(_:contentmode:)-7i7bv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:in:fillstyle:)-7rx0a",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:in:fillstyle:)-p6gt",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(in:fillstyle:)-2eyup",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(in:fillstyle:)-406q7",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-25ren",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-4sk7i",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-5nx7c",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-kbxh",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonstyle(_:)-6azqr",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonstyle(_:)-7kex4",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2apig",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6h492",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8cpyq",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3564",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3b2t6",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6kuv6",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-44hco",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4di1n",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6rq71",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2p0p8",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6jfhf",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-c7j",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:_:for:)-31eyi",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:_:for:)-m90r",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-4q3ph",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-9d7hh",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-9m5qj",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-5w7sw",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-5wyno",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-6s0ky",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-12tw5",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-7a0eq",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-7v6i7",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-2ds6b",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4dn51",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5t84i",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8nae5",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4plqs",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-70fkc",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-31a5o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-6ny4a",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-2m3fw",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-6an1",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-94vtp",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedobject(_:)-14mwg",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedobject(_:)-1o0g2",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedsceneobject(_:)-2b18s",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedsceneobject(_:)-7g256",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedscenevalue(_:_:)-4xs6o",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedscenevalue(_:_:)-t69d",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:_:)-39j51",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:_:)-4czg5",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-2s9qq",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-56ach",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-97ppg",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:)-8x0gy",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:)-ii9a",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-1fikz",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-4os5a",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-5bgtw",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-zijq",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listitemtint(_:)-3d3wq",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listitemtint(_:)-74qrm",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-3dudq",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-78j5k",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-9kdin",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-66clj",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-77hid",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-8zkmd",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-158ef",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-2hfep",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-74mo0",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-9nond",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-2bcrh",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-49fjq",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-5pq1k",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-2dc8d",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-3anke",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-8p5az",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-9nmcw",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-vlm7",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:initial:_:)-2iqbu",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:initial:_:)-4qrj4",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:delegate:)-1g9kl",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:delegate:)-5nrmk",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-2aqpa",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-34zjm",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-3rre",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-4ssfx",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:perform:)-3319k",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:perform:)-6hjyu",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:validator:perform:)-1kjuo",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:validator:perform:)-4bb66",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:)-1mj9m",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:)-62m8r",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/renameaction(_:)-5z7l5",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/renameaction(_:)-8vwld",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareainset(edge:alignment:spacing:content:)-2urgr",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareainset(edge:alignment:spacing:content:)-7ez6e",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:)-5g646",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:)-9ksie",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(_:anchor:)-5jkk6",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(_:anchor:)-6dgm1",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2u36b",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3v1f6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4s5ia",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-7kwk5",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-e31t",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-nol0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-39kmh",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-aksm",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-aosr",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-1vvlr",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-5bhts",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-5uy8g",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-1fglx",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-6ackd",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-6wn4m",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1k9mx",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-3hz60",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8pqk",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-2arr2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-2ntlm",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-5pmx0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2jq3w",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9q1im",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-ekuq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1erj2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1vkwa",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6o4db",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(content:)-2z4nt",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(content:)-3es2r",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-19raa",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-8iro4",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-9xhc6",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typesettinglanguage(_:isenabled:)-29hzr",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typesettinglanguage(_:isenabled:)-3wq9c",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/peersyncview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/peersyncview",
            "title" : "PeerSyncView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnectionview\/init(syncconnection:)",
                "title" : "init(syncConnection: SyncConnection)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnectionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnectionview\/syncconnection",
                "title" : "var syncConnection: SyncConnection",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnectionview\/staterepresentationview()",
                "title" : "func stateRepresentationView() -> some View",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(activationpoint:)-68kpg",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(activationpoint:)-6vgul",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaction(named:_:)-4wvt9",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaction(named:_:)-74f6c",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaction(named:_:)-9w3v6",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityactivationpoint(_:)-24cj2",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityactivationpoint(_:)-45qaa",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-1r2ur",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-33uvj",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-36nji",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-4fvzc",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-6lzjl",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-6n0ik",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-77zol",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitycustomcontent(_:_:importance:)-9m9no",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityhint(_:)-3xk8v",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityhint(_:)-5lpdg",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityhint(_:)-7q37f",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityinputlabels(_:)-48rqs",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityinputlabels(_:)-4adsz",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityinputlabels(_:)-5kfs3",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitylabel(_:)-6bdbz",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitylabel(_:)-7ge3k",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitylabel(_:)-lhp1",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:)-1qiks",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:)-5jrvg",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:)-8dtem",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:)-8gjz1",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6emih",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8nvoo",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9tdnv",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-zqqn",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entrylabel:)-4z0vy",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entrylabel:)-5bbr0",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entrylabel:)-5buzd",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:entries:entrylabel:)-8vs7l",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:textranges:)-1hqhe",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:textranges:)-2nu9a",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:textranges:)-4t2c6",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotor(_:textranges:)-xigw",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityvalue(_:)-3a307",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityvalue(_:)-3l7gc",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityvalue(_:)-92lof",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:)-1ddby",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:)-57jpt",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:)-ybn2",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:message:)-2xfd7",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:message:)-4n906",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:actions:message:)-4vlvc",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:)-13chf",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:)-1hq71",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:)-88apv",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:message:)-1i2ae",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:message:)-4q9pu",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(_:ispresented:presenting:actions:message:)-6pojy",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alignmentguide(_:computevalue:)-8tbaz",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alignmentguide(_:computevalue:)-dcyh",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/aspectratio(_:contentmode:)-5a9bm",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/aspectratio(_:contentmode:)-yndv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(_:in:fillstyle:)-4sai7",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(_:in:fillstyle:)-kyad",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(in:fillstyle:)-3shnu",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/background(in:fillstyle:)-5g4de",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/badge(_:)-1igak",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/badge(_:)-1mxig",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/badge(_:)-3j9i3",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/badge(_:)-5g8h7",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/buttonstyle(_:)-33hay",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/buttonstyle(_:)-39vg3",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-151b4",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-41m4b",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-66njv",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1agb",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1fa50",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5kt6s",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4ega5",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-562w1",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8wqqm",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-82vh6",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8dszu",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-946hl",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contentmargins(_:_:for:)-9ebsh",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contentmargins(_:_:for:)-w18n",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-20kir",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-7zhlj",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-8wugs",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogconfirmationlabel(_:)-3dedp",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogconfirmationlabel(_:)-97opl",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogconfirmationlabel(_:)-9a6x3",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogmessage(_:)-27gae",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogmessage(_:)-40x2",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogmessage(_:)-7spcf",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-69lbl",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-o7lt",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-48avs",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5vmw",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4ijro",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-791gj",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-1owfm",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-5drkt",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporterfilenamelabel(_:)-3j0gc",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporterfilenamelabel(_:)-4o5do",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileexporterfilenamelabel(_:)-5f4xk",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedobject(_:)-61e6b",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedobject(_:)-6a7dj",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedsceneobject(_:)-6d0u9",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedsceneobject(_:)-tdu",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedscenevalue(_:_:)-55xj7",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedscenevalue(_:_:)-6n9c0",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedvalue(_:_:)-82tu",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/focusedvalue(_:_:)-9wej6",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/help(_:)-3zrbf",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/help(_:)-65s3t",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/help(_:)-8th75",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyboardshortcut(_:)-3cit4",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyboardshortcut(_:)-8c3c3",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linelimit(_:)-2c4x9",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linelimit(_:)-5setc",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linelimit(_:)-84f7j",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linelimit(_:)-8ream",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listitemtint(_:)-26tz1",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listitemtint(_:)-6g0cg",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:)-406l1",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:)-5mdlx",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:)-7r026",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:displaymode:)-3wf4f",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:displaymode:)-840dn",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationbartitle(_:displaymode:)-894t7",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdocument(_:preview:)-3gqci",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdocument(_:preview:)-473k3",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdocument(_:preview:)-4k5ez",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationdocument(_:preview:)-h03h",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsubtitle(_:)-1znfg",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsubtitle(_:)-5fzjb",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationsubtitle(_:)-8kqho",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationtitle(_:)-3a2v0",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationtitle(_:)-4avey",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationtitle(_:)-4jic1",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationtitle(_:)-75v45",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationtitle(_:)-fg2f",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onchange(of:initial:_:)-1053g",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onchange(of:initial:_:)-3db2n",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:delegate:)-7nti0",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:delegate:)-91kg6",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:istargeted:perform:)-3iyu",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:istargeted:perform:)-3y9vr",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:istargeted:perform:)-5t8r7",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ondrop(of:istargeted:perform:)-72ftv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onpastecommand(of:perform:)-3pdeu",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onpastecommand(of:perform:)-7bmj5",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onpastecommand(of:validator:perform:)-3tnx8",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onpastecommand(of:validator:perform:)-5cjc6",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/padding(_:)-277bx",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/padding(_:)-46gad",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/renameaction(_:)-8ykss",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/renameaction(_:)-9nsvu",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/safeareainset(edge:alignment:spacing:content:)-3r6k3",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/safeareainset(edge:alignment:spacing:content:)-7ztsc",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/safeareapadding(_:)-1mfdk",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/safeareapadding(_:)-4qjs5",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scaleeffect(_:anchor:)-6ah38",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scaleeffect(_:anchor:)-h54u",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1wamk",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8d82h",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8iaop",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-2tai9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-4x27f",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-666ie",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:ispresented:placement:prompt:)-21dvj",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:ispresented:placement:prompt:)-64mto",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:ispresented:placement:prompt:)-9rz6f",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:)-44ie4",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:)-57xw0",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:)-850lb",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:suggestions:)-4gwmh",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:suggestions:)-7lz59",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:placement:prompt:suggestions:)-7peqf",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1uhh1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-2msb",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5pu4i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:placement:prompt:token:)-2eks3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:placement:prompt:token:)-3i4ad",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:placement:prompt:token:)-3n4r6",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-10txd",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-11ydz",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7m6uh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-67whu",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-94i1u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-p97i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbar(content:)-1ho4x",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbar(content:)-7y5ox",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/typeselectequivalent(_:)-4na0v",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/typeselectequivalent(_:)-4wdk5",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/typeselectequivalent(_:)-p0fp",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/typesettinglanguage(_:isenabled:)-1416z",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/typesettinglanguage(_:isenabled:)-8o375",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnectionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncconnectionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncconnectionview",
            "title" : "SyncConnectionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/init(document:)",
                "title" : "init(document: MeetingNotesDocument)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(activationpoint:)-6c2p3",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(activationpoint:)-9l6ya",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-6lvxj",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-9c1t6",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-9mv77",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactivationpoint(_:)-8ugp6",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactivationpoint(_:)-8zy2k",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-4mzhd",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-4vao9",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-5m2jz",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-5mu4z",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-6lv4c",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-6sy5r",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-8ghih",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-9uiik",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-2f8cq",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-8p84t",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-8vpf1",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-22bjq",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-3fjfk",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-otyg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-2mk9u",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-4gqty",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-4hciu",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-3ejmt",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-661gi",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-7n4jk",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-8whxq",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3cr12",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4py9v",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5h34n",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-qa9x",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-1qbi6",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-21763",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-66gci",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-6dwit",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-3xgt4",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-6kfcz",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-7f4kw",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-7wtaa",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-2lb63",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-53c6v",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-62kfp",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-39bx4",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-5lzyh",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-9u4c8",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-3aj2p",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-6arzi",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-n3cj",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-46ctu",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-66lve",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-7evkv",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-63ge9",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-6ihf0",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-8rven",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alignmentguide(_:computevalue:)-359ju",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alignmentguide(_:computevalue:)-89i1c",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/aspectratio(_:contentmode:)-5vi3b",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/aspectratio(_:contentmode:)-6sttl",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:in:fillstyle:)-4ipqh",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:in:fillstyle:)-5qfut",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(in:fillstyle:)-5y190",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(in:fillstyle:)-9bh55",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-3e24x",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-41hcp",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-44b60",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-e83f",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonstyle(_:)-9pi7t",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonstyle(_:)-9tuaw",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3hvr2",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5584n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qu6f",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2y1nk",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3bjdv",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-85gqd",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1wjg9",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-28p5m",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-34go5",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-29n11",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6e1v2",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9ao6b",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:_:for:)-1yb1h",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:_:for:)-42qtd",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-17fj7",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-8tyun",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-8y43c",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-32vhx",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-4ojkx",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-51ocy",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-2slmj",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-3ewlz",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-6bv5s",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4rgw6",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8t1gm",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-22co4",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-kgn9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7b9oh",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7ofcw",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-4rshk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-70h6d",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-1ezll",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-70kuk",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-71nll",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedobject(_:)-8kcai",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedobject(_:)-xqxy",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedsceneobject(_:)-1elka",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedsceneobject(_:)-37f3q",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedscenevalue(_:_:)-66ryz",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedscenevalue(_:_:)-7v5tc",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:_:)-7z43q",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:_:)-g3m1",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-22uh3",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-2j7m3",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-80hbh",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:)-6sg7d",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:)-8vzpx",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-3qhqz",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-3t9po",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-564oe",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-60rwa",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listitemtint(_:)-2buqt",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listitemtint(_:)-6o3g5",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-1zej0",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-6zbql",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-85tud",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-12mq9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-1jfas",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-3jd6h",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-10uyw",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-1etta",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-7gpsd",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-7wjtc",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-72ss3",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-87ux1",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-970d5",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-4dqpd",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-6urx",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-6x5yw",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-74tw0",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-h9kf",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:initial:_:)-6xnaf",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:initial:_:)-6yb2n",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:delegate:)-1kkuw",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:delegate:)-2kum4",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-70hyl",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-7mhgy",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-868j1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-pqkl",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:perform:)-4xr26",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:perform:)-5ygn3",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:validator:perform:)-15e6u",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:validator:perform:)-7nh1y",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:)-4396o",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:)-93slg",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/renameaction(_:)-2zjmc",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/renameaction(_:)-d98f",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareainset(edge:alignment:spacing:content:)-3iqdo",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareainset(edge:alignment:spacing:content:)-9jphy",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:)-4mdx5",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:)-598j5",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(_:anchor:)-5hoz6",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(_:anchor:)-7bgpo",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2bvhx",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4ptmj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-drq6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-1kwk6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-2g858",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-6lar2",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-29z7e",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-5fuky",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-9bp18",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-3z0uq",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-8guxf",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-eob3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-414mc",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-6bscy",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-73o2l",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1qxyt",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-95ijh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9hdxy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-26lbp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-2t4t3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-6rgd2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4fnjb",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4hewn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5sgii",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4w3d6",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-fnh8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-i7ox",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(content:)-4wi3p",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(content:)-rdom",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-62n2y",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-7skgh",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-7tn46",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typesettinglanguage(_:isenabled:)-1nzt6",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typesettinglanguage(_:isenabled:)-7i2ie",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeview",
            "title" : "MergeView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview\/init(document:)",
                "title" : "init(document: MeetingNotesDocument)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(activationpoint:)-213hi",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(activationpoint:)-6jfik",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaction(named:_:)-1rsrw",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaction(named:_:)-2ql0d",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaction(named:_:)-9t4qx",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityactivationpoint(_:)-1ubml",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityactivationpoint(_:)-rzzu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-174im",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-1pkid",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-31yd",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-3t5a4",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-6xd4z",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-7qkqr",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-80hwh",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitycustomcontent(_:_:importance:)-9upjr",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityhint(_:)-11nks",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityhint(_:)-3tfpg",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityhint(_:)-7j89r",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityinputlabels(_:)-1qtzy",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityinputlabels(_:)-3ur57",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityinputlabels(_:)-7dkqe",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitylabel(_:)-3c1qj",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitylabel(_:)-4x500",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitylabel(_:)-5z3lq",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:)-1jsq",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:)-2pvs8",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:)-42thf",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:)-5uubp",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1a1po",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4t2au",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9a3u3",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9m7l4",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entrylabel:)-1rfik",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entrylabel:)-4sfmr",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entrylabel:)-96gkl",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:entries:entrylabel:)-9ov58",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:textranges:)-2axcx",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:textranges:)-8pjxv",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:textranges:)-9e6om",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotor(_:textranges:)-q5fu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityvalue(_:)-6qgts",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityvalue(_:)-7ra05",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityvalue(_:)-8euas",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:)-41v9b",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:)-5bjk0",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:)-8dzx",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:message:)-2nv4x",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:message:)-4p8fp",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:actions:message:)-4xjse",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:)-21adi",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:)-4q3jd",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:)-96tko",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:message:)-4naol",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:message:)-985eq",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(_:ispresented:presenting:actions:message:)-g72d",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alignmentguide(_:computevalue:)-3exgp",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alignmentguide(_:computevalue:)-5bvpg",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/aspectratio(_:contentmode:)-1njik",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/aspectratio(_:contentmode:)-1rf31",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(_:in:fillstyle:)-6jwcl",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(_:in:fillstyle:)-9majt",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(in:fillstyle:)-3yjv5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/background(in:fillstyle:)-8l35e",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/badge(_:)-5wgi5",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/badge(_:)-76s5z",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/badge(_:)-8b1kt",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/badge(_:)-8vgs0",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/buttonstyle(_:)-2p8kp",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/buttonstyle(_:)-2r1hy",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1zpt",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4g868",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-97nje",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4guar",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-560jm",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8i34p",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3zvqw",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8716s",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-ij50",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2klsp",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-61kr9",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8ixg3",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contentmargins(_:_:for:)-1cqgy",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contentmargins(_:_:for:)-6hgxk",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogsuppressiontoggle(_:issuppressed:)-2eykc",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogsuppressiontoggle(_:issuppressed:)-4oknd",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogsuppressiontoggle(_:issuppressed:)-51l5p",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogconfirmationlabel(_:)-2fjo1",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogconfirmationlabel(_:)-61byl",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogconfirmationlabel(_:)-p4ub",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogmessage(_:)-4j5jn",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogmessage(_:)-8dtmv",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogmessage(_:)-9j0bt",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-13vfh",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-99waa",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5096a",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8i7rp",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-867y1",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9v358",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-2xvp4",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-lvsd",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporterfilenamelabel(_:)-53vpj",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporterfilenamelabel(_:)-654ws",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileexporterfilenamelabel(_:)-6qjp9",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedobject(_:)-4n3w",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedobject(_:)-5imqj",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedsceneobject(_:)-2ikf7",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedsceneobject(_:)-2inas",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedscenevalue(_:_:)-1btnd",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedscenevalue(_:_:)-9cwvr",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedvalue(_:_:)-3ma9r",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/focusedvalue(_:_:)-7lgc2",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/help(_:)-1gtdx",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/help(_:)-4fvl0",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/help(_:)-6x5x0",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyboardshortcut(_:)-36lq0",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyboardshortcut(_:)-3ly63",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linelimit(_:)-4cky0",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linelimit(_:)-7clmv",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linelimit(_:)-7llcl",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linelimit(_:)-9aq31",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listitemtint(_:)-9lndq",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listitemtint(_:)-9xft3",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:)-35p6d",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:)-4qa2b",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:)-9ae7r",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:displaymode:)-30y4u",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:displaymode:)-87ee4",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationbartitle(_:displaymode:)-v6j8",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdocument(_:preview:)-1uecz",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdocument(_:preview:)-3lh04",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdocument(_:preview:)-474px",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationdocument(_:preview:)-8082a",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsubtitle(_:)-52lxi",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsubtitle(_:)-777w1",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationsubtitle(_:)-7dwi",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationtitle(_:)-1otkp",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationtitle(_:)-2r8bz",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationtitle(_:)-62s74",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationtitle(_:)-66gij",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationtitle(_:)-9iyi9",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onchange(of:initial:_:)-3lwcm",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onchange(of:initial:_:)-9vynk",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:delegate:)-1kepv",
                    "title" : "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:delegate:)-9rig7",
                    "title" : "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:istargeted:perform:)-2is3a",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:istargeted:perform:)-2uy3y",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:istargeted:perform:)-2wh2t",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ondrop(of:istargeted:perform:)-9hlgf",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/onpastecommand(of:perform:)-20rl5",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onpastecommand(of:perform:)-whle",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onpastecommand(of:validator:perform:)-595pf",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/onpastecommand(of:validator:perform:)-6zx57",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/padding(_:)-109di",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/padding(_:)-7myrv",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/renameaction(_:)-3tia1",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/renameaction(_:)-8mq4y",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/safeareainset(edge:alignment:spacing:content:)-8t7p0",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/safeareainset(edge:alignment:spacing:content:)-w9b6",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/safeareapadding(_:)-22d5l",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/safeareapadding(_:)-6zwy2",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scaleeffect(_:anchor:)-6i3l8",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scaleeffect(_:anchor:)-8dr95",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2lotb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4s0pv",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4tfkn",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:placement:prompt:token:)-6jlvf",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:placement:prompt:token:)-7i6ay",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:editabletokens:placement:prompt:token:)-8bs2p",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:ispresented:placement:prompt:)-26dip",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:ispresented:placement:prompt:)-9koz",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:ispresented:placement:prompt:)-e1ka",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:)-280ey",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:)-94c5j",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:)-98uls",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:suggestions:)-1qwo0",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:suggestions:)-2kcuh",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:placement:prompt:suggestions:)-3qbf4",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-17pkr",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-56m5h",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5nftc",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:placement:prompt:token:)-3jvui",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:placement:prompt:token:)-84utg",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:placement:prompt:token:)-vp9v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2o1qp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-34col",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6kzbn",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-550fn",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9cm47",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9mw5t",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbar(content:)-5h2gv",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbar(content:)-87cen",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/typeselectequivalent(_:)-26znd",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/typeselectequivalent(_:)-62b9v",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/typeselectequivalent(_:)-9upqr",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/typesettinglanguage(_:isenabled:)-9paw",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/typesettinglanguage(_:isenabled:)-ihkm",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncview",
            "title" : "SyncView",
            "type" : "struct"
          },
          {
            "title" : "Previews",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews",
            "title" : "MeetingNotesDocumentView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews",
            "title" : "EditableAgendaItemListView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews",
            "title" : "PeerBrowserView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeview_previews",
            "title" : "MergeView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncview_previews",
            "title" : "SyncView_Previews",
            "type" : "struct"
          },
          {
            "title" : "Shared Peer Networking Components",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/autoconnect",
                "title" : "var autoconnect: Bool",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/browser",
                "title" : "var browser: NWBrowser?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/browserresults",
                "title" : "var browserResults: [NWBrowser.Result]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/browserstate",
                "title" : "var browserState: NWBrowser.State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/connections",
                "title" : "var connections: [SyncConnection]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/documents",
                "title" : "var documents: [UUID : MeetingNotesDocument]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/listenersetuperror",
                "title" : "var listenerSetupError: Error?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/listenerstate",
                "title" : "var listenerState: [UUID : NWListener.State]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/listenerstatuserror",
                "title" : "var listenerStatusError: NWError?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/listeners",
                "title" : "var listeners: [UUID : NWListener]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/name",
                "title" : "var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/peerid",
                "title" : "let peerId: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/syncqueue",
                "title" : "let syncQueue: DispatchQueue",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/synctrigger",
                "title" : "var syncTrigger: PassthroughSubject<Void, Never>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/timercancellable",
                "title" : "var timerCancellable: Cancellable?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/txtrecords",
                "title" : "var txtRecords: [UUID : NWTXTRecord]",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/activate()",
                "title" : "func activate()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/attempttoconnecttopeer(_:forpeer:withdoc:)",
                "title" : "func attemptToConnectToPeer(NWEndpoint, forPeer: String, withDoc: UUID)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/automergedocument(for:)",
                "title" : "func automergeDocument(for: UUID) -> Document?",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/deactivate()",
                "title" : "func deactivate()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/delayandattempttoconnect(_:forpeer:withdoc:)",
                "title" : "func delayAndAttemptToConnect(NWEndpoint, forPeer: String, withDoc: UUID)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/registerdocument(_:)",
                "title" : "func registerDocument(MeetingNotesDocument)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/removeconnection(_:)",
                "title" : "func removeConnection(UUID)",
                "type" : "method"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/defaultsharingidentity()",
                "title" : "static func defaultSharingIdentity() -> String",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/documentsynccoordinator\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/documentsynccoordinator",
            "title" : "DocumentSyncCoordinator",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/init(connection:trigger:documentid:)",
                "title" : "init(connection: NWConnection, trigger: AnyPublisher<Void, Never>, documentId: UUID)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/init(endpoint:peerid:trigger:documentid:)",
                "title" : "init(endpoint: NWEndpoint, peerId: String, trigger: AnyPublisher<Void, Never>, documentId: UUID)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/connection",
                "title" : "var connection: NWConnection?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/connectionid",
                "title" : "var connectionId: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/connectionstate",
                "title" : "var connectionState: NWConnection.State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/documentid",
                "title" : "var documentId: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/endpoint",
                "title" : "var endpoint: NWEndpoint?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/peerid",
                "title" : "var peerId: String?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/shortid",
                "title" : "var shortId: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/syncstate",
                "title" : "var syncState: SyncState",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/synctriggercancellable",
                "title" : "var syncTriggerCancellable: Cancellable?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/cancel()",
                "title" : "func cancel()",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/receivedmessage(content:message:from:)",
                "title" : "func receivedMessage(content: Data?, message: NWProtocolFramer.Message, from: NWEndpoint)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/senddocumentid(_:)",
                "title" : "func sendDocumentId(String)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncconnection\/sendsyncmsg(_:)",
                "title" : "func sendSyncMsg(Data)",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnection\/id",
                    "title" : "var id: ObjectIdentifier",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncconnection\/identifiable-implementations",
                "title" : "Identifiable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncconnection\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncconnection\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncconnection",
            "title" : "SyncConnection",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/txtrecordkeys\/doc_id",
                "title" : "static var doc_id: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/txtrecordkeys\/name",
                "title" : "static var name: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/txtrecordkeys\/peer_id",
                "title" : "static var peer_id: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/txtrecordkeys",
            "title" : "TXTRecordKeys",
            "type" : "enum"
          },
          {
            "title" : "Peer to Peer Syncing Protocol",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/init(framer:)",
                "title" : "init(framer: NWProtocolFramer.Instance)",
                "type" : "init"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/cleanup(framer:)",
                "title" : "func cleanup(framer: NWProtocolFramer.Instance)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/handleinput(framer:)",
                "title" : "func handleInput(framer: NWProtocolFramer.Instance) -> Int",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/handleoutput(framer:message:messagelength:iscomplete:)",
                "title" : "func handleOutput(framer: NWProtocolFramer.Instance, message: NWProtocolFramer.Message, messageLength: Int, isComplete: Bool)",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/start(framer:)",
                "title" : "func start(framer: NWProtocolFramer.Instance) -> NWProtocolFramer.StartResult",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/stop(framer:)",
                "title" : "func stop(framer: NWProtocolFramer.Instance) -> Bool",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/wakeup(framer:)",
                "title" : "func wakeup(framer: NWProtocolFramer.Instance)",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/applicationservice",
                "title" : "static var applicationService: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/bonjourtype",
                "title" : "static var bonjourType: String",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/definition",
                "title" : "static let definition: NWProtocolFramer.Definition",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocol\/label",
                "title" : "static var label: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/automergesyncprotocol",
            "title" : "AutomergeSyncProtocol",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/id",
                "title" : "case id",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/invalid",
                "title" : "case invalid",
                "type" : "case"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/sync",
                "title" : "case sync",
                "type" : "case"
              },
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/init(rawvalue:)",
                "title" : "init?(rawValue: UInt32)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncmessagetype\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncmessagetype\/hashvalue",
                    "title" : "var hashValue: Int",
                    "type" : "property"
                  },
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncmessagetype\/hash(into:)",
                    "title" : "func hash(into: inout Hasher)",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncmessagetype\/rawrepresentable-implementations",
                "title" : "RawRepresentable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncmessagetype",
            "title" : "SyncMessageType",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/init(_:)",
                "title" : "init(UnsafeMutableRawBufferPointer)",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/init(from:)",
                "title" : "init(from: Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/init(type:length:)",
                "title" : "init(type: UInt32, length: UInt32)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/encodeddata",
                "title" : "var encodedData: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/length",
                "title" : "let length: UInt32",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/type",
                "title" : "let type: UInt32",
                "type" : "property"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader\/encodedsize",
                "title" : "static var encodedSize: Int",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/automergesyncprotocolheader",
            "title" : "AutomergeSyncProtocolHeader",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/meetingnotes\/network\/nwparameters\/peersyncparameters(documentid:)",
            "title" : "static func peerSyncParameters(documentId: String) -> NWParameters",
            "type" : "method"
          },
          {
            "title" : "Application Resources",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/colorresource\/init(name:bundle:)",
                "title" : "init(name: String, bundle: Bundle)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/colorresource\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/colorresource\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/colorresource",
            "title" : "ColorResource",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/imageresource\/init(name:bundle:)",
                "title" : "init(name: String, bundle: Bundle)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/imageresource\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/imageresource\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/imageresource",
            "title" : "ImageResource",
            "type" : "struct"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/appkit\/nscolor\/init(resource:)",
                    "title" : "init(resource: ColorResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/appkit\/nscolor",
                "title" : "NSColor",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/appkit",
            "title" : "AppKit",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Types",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Extended Classes",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Initializers",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/meetingnotes\/network\/nwprotocolframer\/message\/init(syncmessagetype:)",
                        "title" : "init(syncMessageType: SyncMessageType)",
                        "type" : "init"
                      },
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/meetingnotes\/network\/nwprotocolframer\/message\/syncmessagetype",
                        "title" : "var syncMessageType: SyncMessageType",
                        "type" : "property"
                      }
                    ],
                    "path" : "\/documentation\/meetingnotes\/network\/nwprotocolframer\/message",
                    "title" : "NWProtocolFramer.Message",
                    "type" : "extension"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/network\/nwprotocolframer",
                "title" : "NWProtocolFramer",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/network",
            "title" : "Network",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/swift\/double\/milliseconds(_:)",
                    "title" : "static func milliseconds(Int) -> Double",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/swift\/double",
                "title" : "Double",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/swift",
            "title" : "Swift",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/swiftui\/color\/init(_:)",
                    "title" : "init(ColorResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/swiftui\/color",
                "title" : "Color",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/swiftui\/image\/init(_:)",
                    "title" : "init(ImageResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/swiftui\/image",
                "title" : "Image",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/swiftui",
            "title" : "SwiftUI",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/meetingnotes",
        "title" : "MeetingNotes",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}