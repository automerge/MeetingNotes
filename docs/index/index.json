{
  "interfaceLanguages" : {
    "swift" : [
      {
        "children" : [
          {
            "title" : "Document Model",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/meetingnotes\/appwalkthrough",
            "title" : "Meeting Notes, a Document-based SwiftUI app using Automerge",
            "type" : "article"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/init(title:)",
                "title" : "init(title: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/agendas",
                "title" : "var agendas: [AgendaItem]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/attendees",
                "title" : "var attendees: [String]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesmodel\/title",
                "title" : "var title: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesmodel",
            "title" : "MeetingNotesModel",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/init(title:discussion:)",
                "title" : "init(title: String, discussion: AutomergeText?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/discussion",
                "title" : "var discussion: AutomergeText",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/id",
                "title" : "let id: UUID",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/agendaitem\/title",
                "title" : "var title: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/agendaitem\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/agendaitem\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/agendaitem",
            "title" : "AgendaItem",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/init(configuration:)",
                "title" : "init(configuration: ReadConfiguration) throws",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/doc",
                "title" : "var doc: Document",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/filedecoder",
                "title" : "let fileDecoder: CBORDecoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/fileencoder",
                "title" : "let fileEncoder: CBOREncoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/id",
                "title" : "let id: DocumentId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/latestheads",
                "title" : "var latestHeads: Set<ChangeHash>",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/model",
                "title" : "var model: MeetingNotesModel",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/modeldecoder",
                "title" : "let modelDecoder: AutomergeDecoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/modelencoder",
                "title" : "let modelEncoder: AutomergeEncoder",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/synceddocumenttrigger",
                "title" : "var syncedDocumentTrigger: Cancellable?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/filewrapper(snapshot:configuration:)",
                "title" : "func fileWrapper(snapshot: Document, configuration: WriteConfiguration) throws -> FileWrapper",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/getmodelupdates()",
                "title" : "func getModelUpdates() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/mergefile(_:)",
                "title" : "func mergeFile(URL) -> Result<Bool, Error>",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/snapshot(contenttype:)",
                "title" : "func snapshot(contentType: UTType) throws -> Document",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/storemodelupdates()",
                "title" : "func storeModelUpdates() throws",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/wrappeddocument()",
                "title" : "func wrappedDocument() -> WrappedAutomergeDocument",
                "type" : "method"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/readablecontenttypes",
                "title" : "static var readableContentTypes: [UTType]",
                "type" : "property"
              },
              {
                "title" : "Type Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/sample()",
                "title" : "static func sample() -> MeetingNotesDocument",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/objectwillchange",
                    "title" : "var objectWillChange: ObservableObjectPublisher",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/observableobject-implementations",
                "title" : "ObservableObject Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/writablecontenttypes",
                    "title" : "static var writableContentTypes: [UTType]",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocument\/referencefiledocument-implementations",
                "title" : "ReferenceFileDocument Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocument",
            "title" : "MeetingNotesDocument",
            "type" : "class"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/init(from:)",
                "title" : "init(from: any Decoder) throws",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/init(id:data:)",
                "title" : "init(id: DocumentId, data: Data)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/data",
                "title" : "let data: Data",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/id",
                "title" : "let id: DocumentId",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/transferrepresentation",
                    "title" : "static var transferRepresentation: some TransferRepresentation",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument\/transferable-implementations",
                "title" : "Transferable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/wrappedautomergedocument",
            "title" : "WrappedAutomergeDocument",
            "type" : "struct"
          },
          {
            "path" : "\/documentation\/meetingnotes\/uniformtypeidentifiers\/uttype\/meetingnote",
            "title" : "static var meetingnote: UTType",
            "type" : "property"
          },
          {
            "title" : "Core Application",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/body",
                "title" : "var body: some Scene",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/main()",
                    "title" : "static func main()",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesapp\/app-implementations",
                "title" : "App Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesapp",
            "title" : "MeetingNotesApp",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Enumeration Cases",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeerror\/nosharedhistory",
                "title" : "case NoSharedHistory",
                "type" : "case"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/localizeddescription",
                    "title" : "var localizedDescription: String",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/error-implementations",
                "title" : "Error Implementations",
                "type" : "symbol"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/errordescription",
                    "title" : "var errorDescription: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/failurereason",
                    "title" : "var failureReason: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/helpanchor",
                    "title" : "var helpAnchor: String?",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeerror\/recoverysuggestion",
                    "title" : "var recoverySuggestion: String?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeerror\/localizederror-implementations",
                "title" : "LocalizedError Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeerror",
            "title" : "MergeError",
            "type" : "enum"
          },
          {
            "children" : [
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/userdefaultkeys\/publicpeername",
                "title" : "static let publicPeerName: String",
                "type" : "property"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/userdefaultkeys",
            "title" : "UserDefaultKeys",
            "type" : "enum"
          },
          {
            "title" : "Global Variables",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/meetingnotes\/repo",
            "title" : "let repo: Repo",
            "type" : "var"
          },
          {
            "path" : "\/documentation\/meetingnotes\/websocket",
            "title" : "let websocket: WebSocketProvider",
            "type" : "var"
          },
          {
            "path" : "\/documentation\/meetingnotes\/peertopeer",
            "title" : "let peerToPeer: PeerToPeerProvider",
            "type" : "var"
          },
          {
            "title" : "Logger extensions",
            "type" : "groupMarker"
          },
          {
            "path" : "\/documentation\/meetingnotes\/os\/logger\/document",
            "title" : "static let document: Logger",
            "type" : "property"
          },
          {
            "path" : "\/documentation\/meetingnotes\/os\/logger\/syncflow",
            "title" : "static let syncflow: Logger",
            "type" : "property"
          },
          {
            "title" : "Views",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/init(document:undomanager:)",
                "title" : "init(document: MeetingNotesDocument, undoManager: Environment<UndoManager?>)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/undomanager",
                "title" : "var undoManager: UndoManager?",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(activationpoint:)-4oyml",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(activationpoint:)-84ijp",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-18wam",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-83jjp",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaction(named:_:)-wziy",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactivationpoint(_:)-3mp7g",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityactivationpoint(_:)-7j8kn",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-3215s",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-6vc2k",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-7tavf",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-7ydad",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-80kle",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-87vq",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-8lu8w",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitycustomcontent(_:_:importance:)-8t9ub",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-2l4o6",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-585mm",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityhint(_:)-etvl",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-1f9vs",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-1p2t7",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityinputlabels(_:)-5gn4c",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-1ob1x",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-8z21m",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabel(_:)-9oy6c",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-3j9s6",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-59ola",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-8q1hg",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:)-9vmq6",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1piu7",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2wlkt",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3x2tx",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entryid:entrylabel:)-vs05",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-33oif",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-45br2",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-4nymq",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:entries:entrylabel:)-91xt1",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-18kgo",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-2l02q",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-3pvux",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotor(_:textranges:)-khgh",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-2hv6m",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-5957i",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityvalue(_:)-8em1r",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-21q9t",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-492nm",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:)-4jamt",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-1rra0",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-3zoeu",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:actions:message:)-538dp",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-2q4yz",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-3xucn",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:)-6jqrj",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-5iixx",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-6b4a3",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(_:ispresented:presenting:actions:message:)-9mrni",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alignmentguide(_:computevalue:)-10qqn",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alignmentguide(_:computevalue:)-40adw",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/aspectratio(_:contentmode:)-3y2zj",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/aspectratio(_:contentmode:)-5qyut",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:in:fillstyle:)-4r7mp",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(_:in:fillstyle:)-6u74t",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(in:fillstyle:)-4nl5r",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/background(in:fillstyle:)-92wg5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-25hud",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-2h0v4",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-5prdg",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badge(_:)-8ns7l",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonstyle(_:)-16xin",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/buttonstyle(_:)-8qi63",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1rok1",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4qk9d",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-70nxr",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1dh3f",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3za81",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9ctno",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-172w8",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6g3x3",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7klb3",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1tv8q",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6btzx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7fxjg",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:_:for:)-2u52r",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:_:for:)-3y8tw",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-7jnx9",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-7synr",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(_:issuppressed:)-8rci4",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-11nhy",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-1ofq6",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogconfirmationlabel(_:)-2xtxg",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-383uc",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-3k6t1",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogmessage(_:)-6vjca",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1vsoc",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5xb8z",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-2xizz",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6r1jt",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-279y4",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9m6re",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-3jukp",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-47ebb",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-51ilu",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-6azsm",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileexporterfilenamelabel(_:)-8i3s2",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedobject(_:)-2nmps",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedobject(_:)-4wp9y",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedsceneobject(_:)-4p4ca",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedsceneobject(_:)-9mn5c",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedscenevalue(_:_:)-17wwq",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedscenevalue(_:_:)-80zzn",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:_:)-2d5bz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/focusedvalue(_:_:)-39k6p",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-12jy",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-14o7z",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/help(_:)-9vrfo",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:)-4mwzj",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:)-6odeo",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-4kv2g",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-56fnt",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-7n91e",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:)-gkyn",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listitemtint(_:)-3knxy",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listitemtint(_:)-6rbno",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-2q0mc",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-60g3t",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:)-9m0f2",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-7g36a",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-8v1o2",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationbartitle(_:displaymode:)-9hzo7",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-4qtip",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-5uzd8",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-lxkz",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationdocument(_:preview:)-x7ua",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-2cgg7",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-5opsj",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationsubtitle(_:)-7my60",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-326tf",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-3dsll",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9mxm9",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9rfux",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationtitle(_:)-9x5dq",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:initial:_:)-5zdpd",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:initial:_:)-9ye9t",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:delegate:)-74o48",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:delegate:)-7a1hv",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-1abiv",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-470hh",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-58hqv",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ondrop(of:istargeted:perform:)-89fef",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:perform:)-570r9",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:perform:)-9epyc",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:validator:perform:)-4dc30",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpastecommand(of:validator:perform:)-736pe",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:)-64idm",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:)-9tued",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/renameaction(_:)-3kdxg",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/renameaction(_:)-71hdr",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareainset(edge:alignment:spacing:content:)-3kv0b",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareainset(edge:alignment:spacing:content:)-btob",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:)-2ios2",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:)-5n3z2",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(_:anchor:)-1lkeb",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(_:anchor:)-9sum2",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1i8wl",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-1iqz7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6iuqa",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-1s8u9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-387lv",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:editabletokens:placement:prompt:token:)-7bgrg",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-2kz9j",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-5zx8u",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:ispresented:placement:prompt:)-wx6y",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-8valg",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-9cxj3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:)-9xe64",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-4zco7",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-5qm8y",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:placement:prompt:suggestions:)-8k5de",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5gyrx",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6fcds",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8dql4",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-320ye",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-8ahea",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:placement:prompt:token:)-8irmr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-12xqd",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2zgvc",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5bvk8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5qutl",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9q5bj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-9v451",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(content:)-33ita",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(content:)-iwqc",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-77sbk",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-hb6d",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typeselectequivalent(_:)-jon9",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typesettinglanguage(_:isenabled:)-5a3ha",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/typesettinglanguage(_:isenabled:)-804zo",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview",
            "title" : "MeetingNotesDocumentView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/init(document:agendaitemid:)",
                "title" : "init(document: MeetingNotesDocument, agendaItemId: UUID?)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/agendaitemid",
                "title" : "let agendaItemId: UUID?",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/undomanager",
                "title" : "var undoManager: UndoManager?",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/bindingforagendaitem()",
                "title" : "func bindingForAgendaItem() -> Binding<String>",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(activationpoint:)-4bkeq",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(activationpoint:)-9arii",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-1hpbp",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-5aghd",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaction(named:_:)-b6y9",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactivationpoint(_:)-1h4df",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityactivationpoint(_:)-t1ii",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-1f7uk",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-1lu2h",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-36lh3",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-3e033",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-3vvr3",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-67jmb",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-704rp",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitycustomcontent(_:_:importance:)-7k32",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-17dsb",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-3hgvg",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityhint(_:)-8uw9x",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-44w3x",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-8wszi",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityinputlabels(_:)-kktm",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-1bx4s",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-2suti",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabel(_:)-99olz",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-15v9o",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-3g2eg",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-8tavx",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:)-93ofb",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1ooor",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1tpqp",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-89cxk",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8spe6",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-4i6rr",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-62bqh",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-78kev",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:entries:entrylabel:)-94yer",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-4mm5l",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-6fob0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-7ae6h",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotor(_:textranges:)-7qzj1",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-60u15",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-6884y",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityvalue(_:)-6sj7e",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-14m1k",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-1y2z7",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:)-3gued",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-1ve4x",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-2q4ye",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:actions:message:)-5014c",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-1bvpz",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-3r9jj",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:)-5j2e5",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-1o5k",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-5i85o",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(_:ispresented:presenting:actions:message:)-62wf7",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alignmentguide(_:computevalue:)-23bcw",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alignmentguide(_:computevalue:)-2toyl",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/aspectratio(_:contentmode:)-1eizy",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/aspectratio(_:contentmode:)-5e0d3",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:in:fillstyle:)-295ki",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(_:in:fillstyle:)-32jc4",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(in:fillstyle:)-31y6",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/background(in:fillstyle:)-5vrl7",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-1gkxw",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-34z75",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-89yzn",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badge(_:)-8hgx3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonstyle(_:)-53wd6",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/buttonstyle(_:)-6kpsp",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1ko7s",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4lb0n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8qkrs",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2o52q",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3zrqt",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6vxr8",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1cn0b",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-437f7",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-98bga",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-35tiz",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-43wm6",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8nv6e",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:_:for:)-2q34a",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:_:for:)-4hxr8",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-7j4nf",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-99t0p",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(_:issuppressed:)-ibuk",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-6lif7",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-8rxi5",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogconfirmationlabel(_:)-94ymj",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-208we",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-7rlzk",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogmessage(_:)-x6ic",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6cukx",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-76oh9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-17o3c",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5al48",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-10eq8",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-k1gd",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-5qqc4",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-7g3ns",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-18jbc",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-5p6yg",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileexporterfilenamelabel(_:)-8bjkx",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedobject(_:)-1eby5",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedobject(_:)-1x2hx",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedsceneobject(_:)-1r0jj",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedsceneobject(_:)-yulk",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedscenevalue(_:_:)-39a34",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedscenevalue(_:_:)-76nyu",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:_:)-1l028",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/focusedvalue(_:_:)-4r74s",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-35d6i",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-7x8wr",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/help(_:)-8m1e2",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:)-81icf",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:)-8a7wl",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-4ayzz",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-62s5d",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-65tb0",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:)-7lp3f",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listitemtint(_:)-3pqx1",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listitemtint(_:)-66dtw",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-2r87h",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-38ly3",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:)-440nr",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-2ukav",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-nqfj",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationbartitle(_:displaymode:)-yyao",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-2eny5",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-5h6ka",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-5nit",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationdocument(_:preview:)-7ltu6",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-3xa18",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-7efph",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationsubtitle(_:)-9rw5n",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-2qhkc",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-3yvo9",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-43faa",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-4bjjt",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationtitle(_:)-9o02o",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:initial:_:)-5n1i9",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:initial:_:)-9yzzr",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:delegate:)-1zi6j",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:delegate:)-68agc",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-1qwx5",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-1spct",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-6bg01",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ondrop(of:istargeted:perform:)-7t3sk",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:perform:)-84dob",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:perform:)-j62o",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:validator:perform:)-1nkmo",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpastecommand(of:validator:perform:)-2im1x",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:)-3nqw8",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:)-4fc2n",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/renameaction(_:)-5d2mn",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/renameaction(_:)-9mcnc",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareainset(edge:alignment:spacing:content:)-4t602",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareainset(edge:alignment:spacing:content:)-7o7a0",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:)-2wwmn",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:)-70szs",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(_:anchor:)-6mz3p",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(_:anchor:)-719h5",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2hgqr",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-675f5",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6ppxp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-6f59m",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-6yvnx",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:editabletokens:placement:prompt:token:)-8qrhs",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-19h61",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-5qaym",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:ispresented:placement:prompt:)-98125",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-34q43",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-50nwe",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:)-vfgy",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-4hjqg",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-nvla",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:placement:prompt:suggestions:)-uiee",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-16sq3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-754gn",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:ispresented:placement:prompt:token:)-90ajp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-5ybng",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-77ew1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:placement:prompt:token:)-7t28k",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4l5g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7fmxp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9bd5n",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2bri",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4fb5c",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8x7z3",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(content:)-1fyhr",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(content:)-88wyx",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-51w9x",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-8k3ly",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typeselectequivalent(_:)-9hh78",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typesettinglanguage(_:isenabled:)-2rgwb",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/typesettinglanguage(_:isenabled:)-3stpa",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/editableagendaitemview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/editableagendaitemview",
            "title" : "EditableAgendaItemView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/availablepeerview\/init(result:)",
                "title" : "init(result: AvailablePeer)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/availablepeerview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/availablepeerview\/result",
                "title" : "let result: AvailablePeer",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(activationpoint:)-3pq7w",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(activationpoint:)-416ai",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaction(named:_:)-1bess",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaction(named:_:)-5hiab",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaction(named:_:)-8qbr0",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityactivationpoint(_:)-1p7od",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityactivationpoint(_:)-9r5d0",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-1ytm9",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-232ls",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-26ec2",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-2y6ts",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-3pm45",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-6e9nu",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-72h5d",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitycustomcontent(_:_:importance:)-79koe",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityhint(_:)-4wyxg",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityhint(_:)-7440o",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityhint(_:)-964qw",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityinputlabels(_:)-5xtrs",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityinputlabels(_:)-9vc31",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityinputlabels(_:)-f77g",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitylabel(_:)-2nbth",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitylabel(_:)-4ujd8",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitylabel(_:)-jdr3",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:)-3tavq",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:)-55fxi",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:)-86fuc",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:)-letg",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3xfhm",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5f6tz",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6h6ss",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8o1n7",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entrylabel:)-3q0e3",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entrylabel:)-5bgjp",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entrylabel:)-5yguh",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:entries:entrylabel:)-9hgti",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:textranges:)-27o34",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:textranges:)-4ypjl",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:textranges:)-61zks",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotor(_:textranges:)-6qvou",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityvalue(_:)-253n5",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityvalue(_:)-2yp65",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityvalue(_:)-7i2sf",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:)-4pb5v",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:)-6x870",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:)-7hq1x",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:message:)-45sq0",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:message:)-6nsgt",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:actions:message:)-6xn8e",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:)-6o9v7",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:)-7vv3q",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:)-8pq92",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:message:)-3v667",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:message:)-3w544",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(_:ispresented:presenting:actions:message:)-9rees",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alignmentguide(_:computevalue:)-73jyz",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alignmentguide(_:computevalue:)-p14s",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/aspectratio(_:contentmode:)-6yjmt",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/aspectratio(_:contentmode:)-7iv1o",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(_:in:fillstyle:)-3b3cj",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(_:in:fillstyle:)-806t7",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(in:fillstyle:)-1stth",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/background(in:fillstyle:)-990tk",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/badge(_:)-4ofbx",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/badge(_:)-6lv6v",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/badge(_:)-71uea",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/badge(_:)-833n4",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/buttonstyle(_:)-8bbho",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/buttonstyle(_:)-9qcd5",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2fdk0",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4j6f5",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6jqze",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2bi30",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-4dqn1",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-83tus",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-2c9v6",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-5chk",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6cs1b",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1523y",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5qvkx",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8z7pt",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contentmargins(_:_:for:)-8hipr",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contentmargins(_:_:for:)-yykp",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogsuppressiontoggle(_:issuppressed:)-2c7os",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogsuppressiontoggle(_:issuppressed:)-4n1co",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogsuppressiontoggle(_:issuppressed:)-7jlai",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogconfirmationlabel(_:)-2wgs3",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogconfirmationlabel(_:)-3esa1",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogconfirmationlabel(_:)-60hoo",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogmessage(_:)-55761",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogmessage(_:)-5yod6",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogmessage(_:)-7v8e9",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7f0nv",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7h2r9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6lyv9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8ig46",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9jutg",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-9l7l7",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9sv8r",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9uvlc",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporterfilenamelabel(_:)-2prws",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporterfilenamelabel(_:)-53g6h",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileexporterfilenamelabel(_:)-95xaz",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedobject(_:)-8baw4",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedobject(_:)-9j2jr",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedsceneobject(_:)-1utha",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedsceneobject(_:)-nc64",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedscenevalue(_:_:)-5qdub",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedscenevalue(_:_:)-7ojxw",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedvalue(_:_:)-6rllx",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/focusedvalue(_:_:)-i2ef",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/help(_:)-2qsj9",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/help(_:)-2xred",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/help(_:)-6ycje",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyboardshortcut(_:)-5rlgh",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyboardshortcut(_:)-7e0bv",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linelimit(_:)-4nx2j",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linelimit(_:)-83heh",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linelimit(_:)-9fv8u",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linelimit(_:)-jg57",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listitemtint(_:)-4uk2v",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listitemtint(_:)-7chrm",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:)-27xiw",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:)-2jqfi",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:)-5hix5",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:displaymode:)-2y1j7",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:displaymode:)-4wvds",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationbartitle(_:displaymode:)-52e66",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdocument(_:preview:)-2f3t1",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdocument(_:preview:)-2hatn",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdocument(_:preview:)-5tqlf",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationdocument(_:preview:)-6bavu",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsubtitle(_:)-1jspn",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsubtitle(_:)-6tovz",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationsubtitle(_:)-9tdsu",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationtitle(_:)-10734",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationtitle(_:)-4lpi0",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationtitle(_:)-5pxnv",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationtitle(_:)-86dfk",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationtitle(_:)-955rk",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onchange(of:initial:_:)-5jv8v",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onchange(of:initial:_:)-7504e",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:delegate:)-8o8fd",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:delegate:)-9bblq",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:istargeted:perform:)-37hbu",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:istargeted:perform:)-3krbj",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:istargeted:perform:)-59keg",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ondrop(of:istargeted:perform:)-74r79",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpastecommand(of:perform:)-8jyze",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpastecommand(of:perform:)-wyuj",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpastecommand(of:validator:perform:)-35lhw",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpastecommand(of:validator:perform:)-5sb5q",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/padding(_:)-2kg6j",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/padding(_:)-zq53",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/renameaction(_:)-16ryj",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/renameaction(_:)-5koh7",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/safeareainset(edge:alignment:spacing:content:)-6mzyg",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/safeareainset(edge:alignment:spacing:content:)-7xpsz",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/safeareapadding(_:)-6o8da",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/safeareapadding(_:)-s5qo",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scaleeffect(_:anchor:)-2iw51",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scaleeffect(_:anchor:)-2lz02",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5s44o",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-5t2n4",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-pkpw",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:placement:prompt:token:)-1bvwu",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:placement:prompt:token:)-3r42t",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:editabletokens:placement:prompt:token:)-8c04m",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:ispresented:placement:prompt:)-3l86",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:ispresented:placement:prompt:)-497hn",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:ispresented:placement:prompt:)-8v9ev",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:)-6zrp3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:)-80dkf",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:)-92skv",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:suggestions:)-26zx7",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:suggestions:)-71vf8",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:placement:prompt:suggestions:)-7djis",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4e92w",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6kn8m",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:ispresented:placement:prompt:token:)-88di",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:placement:prompt:token:)-3qkb3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:placement:prompt:token:)-8agkq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:placement:prompt:token:)-8rpcj",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-15rk7",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-24uta",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2qegs",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1my0u",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5w3i4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6k6kw",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbar(content:)-4ajjl",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbar(content:)-4wuvp",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/typeselectequivalent(_:)-5mgh2",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/typeselectequivalent(_:)-7gane",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/typeselectequivalent(_:)-k3uc",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/typesettinglanguage(_:isenabled:)-7dgkq",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/typesettinglanguage(_:isenabled:)-oe0z",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/availablepeerview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/availablepeerview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/availablepeerview",
            "title" : "AvailablePeerView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerconnectionview\/init(peerconnection:)",
                "title" : "init(peerConnection: PeerConnectionInfo)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerconnectionview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerconnectionview\/peerconnection",
                "title" : "let peerConnection: PeerConnectionInfo",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerconnectionview\/staterepresentationview()",
                "title" : "func stateRepresentationView() -> some View",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(activationpoint:)-7dcs4",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(activationpoint:)-ioad",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaction(named:_:)-1qojp",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaction(named:_:)-4hv3r",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaction(named:_:)-5489k",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityactivationpoint(_:)-6tcxf",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityactivationpoint(_:)-84n51",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-49vxb",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-4kadi",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-4tsa7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-51t5m",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-8mse8",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-9zkfw",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-k117",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitycustomcontent(_:_:importance:)-ricd",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityhint(_:)-1xd9t",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityhint(_:)-3lscj",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityhint(_:)-6zj7p",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityinputlabels(_:)-303n7",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityinputlabels(_:)-3dpj9",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityinputlabels(_:)-9ty7r",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitylabel(_:)-5eou9",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitylabel(_:)-75g7b",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitylabel(_:)-7yj3s",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:)-3xsq9",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:)-6530s",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:)-8wgk6",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:)-9fovy",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2ll7g",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6nouc",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-7tgkc",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entryid:entrylabel:)-bo7y",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entrylabel:)-417t",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entrylabel:)-5h5s2",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entrylabel:)-6agrj",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:entries:entrylabel:)-73cik",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:textranges:)-35pxv",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:textranges:)-48e3b",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:textranges:)-7aih8",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotor(_:textranges:)-93ij0",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityvalue(_:)-71qj0",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityvalue(_:)-72onc",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityvalue(_:)-8s3k2",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:)-7bbou",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:)-8ohcd",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:)-9ezev",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:message:)-10i97",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:message:)-3jemw",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:actions:message:)-a1nx",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:)-3793r",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:)-6lxgs",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:)-8q1au",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:message:)-1b4oj",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:message:)-5c8pt",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(_:ispresented:presenting:actions:message:)-820p2",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alignmentguide(_:computevalue:)-140bh",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alignmentguide(_:computevalue:)-v8o0",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/aspectratio(_:contentmode:)-6mca6",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/aspectratio(_:contentmode:)-9myni",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(_:in:fillstyle:)-5ikc6",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(_:in:fillstyle:)-7gzkw",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(in:fillstyle:)-9evow",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/background(in:fillstyle:)-9hakd",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/badge(_:)-2lwa3",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/badge(_:)-85dx",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/badge(_:)-8qmtv",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/badge(_:)-8xbgt",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/buttonstyle(_:)-263vs",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/buttonstyle(_:)-500fq",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-13ibt",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5bb9t",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-n8ae",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-54dsx",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-7ac9i",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9xin0",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1tq7s",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-27z43",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7ut9v",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-50n2w",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5pbq6",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-q1jw",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contentmargins(_:_:for:)-10kmp",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contentmargins(_:_:for:)-5ul02",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-1w4vb",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-9bog8",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogsuppressiontoggle(_:issuppressed:)-ne5o",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogconfirmationlabel(_:)-5gs0h",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogconfirmationlabel(_:)-6z6nh",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogconfirmationlabel(_:)-8zsb9",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogmessage(_:)-1arsq",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogmessage(_:)-409jr",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogmessage(_:)-7doj9",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6peru",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8wcix",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-9uote",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-r6ts",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7hcrf",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-vrjr",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-3k21q",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-9cl0l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporterfilenamelabel(_:)-5lp9i",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporterfilenamelabel(_:)-85lcz",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileexporterfilenamelabel(_:)-9boae",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedobject(_:)-19hrl",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedobject(_:)-5gq3m",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedsceneobject(_:)-6ta8p",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedsceneobject(_:)-zydd",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedscenevalue(_:_:)-2a1wb",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedscenevalue(_:_:)-2fe0p",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedvalue(_:_:)-4fiiq",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/focusedvalue(_:_:)-eova",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/help(_:)-4a82n",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/help(_:)-4xb97",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/help(_:)-868h4",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyboardshortcut(_:)-3a951",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyboardshortcut(_:)-7rev6",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linelimit(_:)-2bwy2",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linelimit(_:)-6w9ms",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linelimit(_:)-7ijsp",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linelimit(_:)-8p4of",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listitemtint(_:)-4et5q",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listitemtint(_:)-4g3g7",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:)-3quj8",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:)-8bc37",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:)-8xsqe",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:displaymode:)-1etci",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:displaymode:)-1vnij",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationbartitle(_:displaymode:)-4cnz8",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdocument(_:preview:)-3240i",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdocument(_:preview:)-7vvaj",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdocument(_:preview:)-efm7",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationdocument(_:preview:)-rgqa",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsubtitle(_:)-2mbcg",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsubtitle(_:)-2ys8v",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationsubtitle(_:)-84omg",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationtitle(_:)-1s89l",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationtitle(_:)-2pqd6",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationtitle(_:)-4hdxz",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationtitle(_:)-55hs",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationtitle(_:)-6r8ar",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onchange(of:initial:_:)-54ssu",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onchange(of:initial:_:)-73to4",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:delegate:)-1qxe9",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:delegate:)-eoqo",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:istargeted:perform:)-1c8b1",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:istargeted:perform:)-2bi51",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:istargeted:perform:)-4d8ez",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ondrop(of:istargeted:perform:)-96yn0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpastecommand(of:perform:)-6h4jr",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpastecommand(of:perform:)-9jloq",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpastecommand(of:validator:perform:)-4xify",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpastecommand(of:validator:perform:)-7qb08",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/padding(_:)-1mivs",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/padding(_:)-825b",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/renameaction(_:)-2aypj",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/renameaction(_:)-6kr9n",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/safeareainset(edge:alignment:spacing:content:)-1xvag",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/safeareainset(edge:alignment:spacing:content:)-7yjhe",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/safeareapadding(_:)-3g8xo",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/safeareapadding(_:)-5j2nw",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scaleeffect(_:anchor:)-63j2c",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scaleeffect(_:anchor:)-7wbjb",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2kzy3",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8xs51",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-h617",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-1f9jg",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-5g1wp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:editabletokens:placement:prompt:token:)-7jtc7",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:ispresented:placement:prompt:)-4uc45",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:ispresented:placement:prompt:)-7e5ps",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:ispresented:placement:prompt:)-80tqa",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:)-1sb7p",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:)-4iqnw",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:)-8qbvx",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:suggestions:)-16snw",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:suggestions:)-36lyg",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:placement:prompt:suggestions:)-4b2eq",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-2zaim",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-7f6tm",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:ispresented:placement:prompt:token:)-95jj2",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:placement:prompt:token:)-13ryr",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:placement:prompt:token:)-2kr0h",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:placement:prompt:token:)-7b7rk",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-58dra",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5dja7",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-8d2ck",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5hal2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6a0ms",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-ebs4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbar(content:)-6jgt",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbar(content:)-812z0",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/typeselectequivalent(_:)-19s4m",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/typeselectequivalent(_:)-4cds",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/typeselectequivalent(_:)-8jxax",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/typesettinglanguage(_:isenabled:)-2vv1f",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/typesettinglanguage(_:isenabled:)-6woy3",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerconnectionview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/peerconnectionview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/peerconnectionview",
            "title" : "PeerConnectionView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/init(documentid:availablepeers:connectionlist:browserstyling:browserstate:listenerstate:nametodisplay:)",
                "title" : "init(documentId: DocumentId, availablePeers: [AvailablePeer], connectionList: [PeerConnectionInfo], browserStyling: Color, browserState: NWBrowser.State, listenerState: NWListener.State, nameToDisplay: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/availablepeers",
                "title" : "var availablePeers: [AvailablePeer]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/browserstate",
                "title" : "var browserState: NWBrowser.State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/browserstyling",
                "title" : "var browserStyling: Color",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/connectionlist",
                "title" : "var connectionList: [PeerConnectionInfo]",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/documentid",
                "title" : "var documentId: DocumentId",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/listenerstate",
                "title" : "var listenerState: NWListener.State",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/nametodisplay",
                "title" : "var nameToDisplay: String",
                "type" : "property"
              },
              {
                "title" : "Instance Methods",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/browsercolor()",
                "title" : "func browserColor() -> Color",
                "type" : "method"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peersyncview\/listenercolor()",
                "title" : "func listenerColor() -> Color",
                "type" : "method"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(activationpoint:)-5j14n",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(activationpoint:)-70uql",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-303qo",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-59pop",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaction(named:_:)-h2ss",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactivationpoint(_:)-4exop",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityactivationpoint(_:)-76p2e",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-17t8y",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-1bqvw",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-1wjpc",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-2zj6n",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-3l3ee",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-3yxs1",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-8axmf",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitycustomcontent(_:_:importance:)-9d6ft",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-712d3",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-8ld8t",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityhint(_:)-9qv2o",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-4a6pc",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-82xyl",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityinputlabels(_:)-8uk17",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-6s39p",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-7otyt",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabel(_:)-7y3hc",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-5cyk5",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-6d65o",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-8kchj",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:)-zkbp",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1j86u",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-47d5v",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6zyse",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9v0c5",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-2kqp0",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-6vde4",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-72wrc",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:entries:entrylabel:)-99qn1",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-1ki9d",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-1lmpu",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-wvd4",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotor(_:textranges:)-xfvo",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-3bk5y",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-6akvk",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityvalue(_:)-995fi",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-6nl3y",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-81hho",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:)-87kna",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-2fyid",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-2ukg3",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:actions:message:)-5jzrf",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-41i5v",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-6615m",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:)-7dmsa",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-186iz",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-6kt2b",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(_:ispresented:presenting:actions:message:)-8bwm5",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alignmentguide(_:computevalue:)-5apor",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alignmentguide(_:computevalue:)-6lakn",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/aspectratio(_:contentmode:)-3ui9",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/aspectratio(_:contentmode:)-7i7bv",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:in:fillstyle:)-7rx0a",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(_:in:fillstyle:)-p6gt",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(in:fillstyle:)-2eyup",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/background(in:fillstyle:)-406q7",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-25ren",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-4sk7i",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-5nx7c",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badge(_:)-kbxh",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonstyle(_:)-6azqr",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/buttonstyle(_:)-7kex4",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-2apig",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6h492",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-8cpyq",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3564",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3b2t6",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6kuv6",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-44hco",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4di1n",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6rq71",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-2p0p8",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6jfhf",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-c7j",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:_:for:)-31eyi",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:_:for:)-m90r",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-4q3ph",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-9d7hh",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(_:issuppressed:)-9m5qj",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-5w7sw",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-5wyno",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogconfirmationlabel(_:)-6s0ky",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-12tw5",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-7a0eq",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogmessage(_:)-7v6i7",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-2ds6b",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4dn51",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-5t84i",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8nae5",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-4plqs",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-70fkc",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-31a5o",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-6ny4a",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-2m3fw",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-6an1",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileexporterfilenamelabel(_:)-94vtp",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedobject(_:)-14mwg",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedobject(_:)-1o0g2",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedsceneobject(_:)-2b18s",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedsceneobject(_:)-7g256",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedscenevalue(_:_:)-4xs6o",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedscenevalue(_:_:)-t69d",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:_:)-39j51",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/focusedvalue(_:_:)-4czg5",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-2s9qq",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-56ach",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/help(_:)-97ppg",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:)-8x0gy",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:)-ii9a",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-1fikz",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-4os5a",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-5bgtw",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:)-zijq",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listitemtint(_:)-3d3wq",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listitemtint(_:)-74qrm",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-3dudq",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-78j5k",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:)-9kdin",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-66clj",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-77hid",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationbartitle(_:displaymode:)-8zkmd",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-158ef",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-2hfep",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-74mo0",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationdocument(_:preview:)-9nond",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-2bcrh",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-49fjq",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationsubtitle(_:)-5pq1k",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-2dc8d",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-3anke",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-8p5az",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-9nmcw",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationtitle(_:)-vlm7",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:initial:_:)-2iqbu",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:initial:_:)-4qrj4",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:delegate:)-1g9kl",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:delegate:)-5nrmk",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-2aqpa",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-34zjm",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-3rre",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ondrop(of:istargeted:perform:)-4ssfx",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:perform:)-3319k",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:perform:)-6hjyu",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:validator:perform:)-1kjuo",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpastecommand(of:validator:perform:)-4bb66",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:)-1mj9m",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:)-62m8r",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/renameaction(_:)-5z7l5",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/renameaction(_:)-8vwld",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareainset(edge:alignment:spacing:content:)-2urgr",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareainset(edge:alignment:spacing:content:)-7ez6e",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:)-5g646",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:)-9ksie",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(_:anchor:)-5jkk6",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(_:anchor:)-6dgm1",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2u36b",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3v1f6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4s5ia",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-7kwk5",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-e31t",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:editabletokens:placement:prompt:token:)-nol0",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-39kmh",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-aksm",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:ispresented:placement:prompt:)-aosr",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-1vvlr",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-5bhts",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:)-5uy8g",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-1fglx",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-6ackd",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:placement:prompt:suggestions:)-6wn4m",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1k9mx",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-3hz60",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:ispresented:placement:prompt:token:)-8pqk",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-2arr2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-2ntlm",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:placement:prompt:token:)-5pmx0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2jq3w",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9q1im",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-ekuq",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1erj2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-1vkwa",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6o4db",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(content:)-2z4nt",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(content:)-3es2r",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-19raa",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-8iro4",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typeselectequivalent(_:)-9xhc6",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typesettinglanguage(_:isenabled:)-29hzr",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/typesettinglanguage(_:isenabled:)-3wq9c",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peersyncview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/peersyncview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/peersyncview",
            "title" : "PeerSyncView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncstatusview\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncstatusview\/init(nametodisplay:)",
                "title" : "init(nameToDisplay: String)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncstatusview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncstatusview\/nametodisplay",
                "title" : "var nameToDisplay: String",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(activationpoint:)-9fvll",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(activationpoint:)-cnyd",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaction(named:_:)-1shie",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaction(named:_:)-1xzjy",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaction(named:_:)-2b4vx",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityactivationpoint(_:)-73o6h",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityactivationpoint(_:)-772q8",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-34ng7",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-5ptf3",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-65es7",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-6cyit",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-7ovku",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-9u32r",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-i3v8",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitycustomcontent(_:_:importance:)-oxzq",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityhint(_:)-6c2p3",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityhint(_:)-88ey5",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityhint(_:)-oive",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityinputlabels(_:)-1111j",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityinputlabels(_:)-16wf7",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityinputlabels(_:)-80nq3",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitylabel(_:)-4aacr",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitylabel(_:)-8op9y",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitylabel(_:)-v4by",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:)-58tek",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:)-6r5ve",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:)-7mrss",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:)-9fdio",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5zp9o",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-64368",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8vwzb",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-t9yx",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entrylabel:)-16a3i",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entrylabel:)-1x394",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entrylabel:)-6g00j",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:entries:entrylabel:)-75d9l",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:textranges:)-6u3m8",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:textranges:)-86ab",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:textranges:)-9x1uh",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotor(_:textranges:)-9yhxz",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityvalue(_:)-4kw6u",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityvalue(_:)-75uwf",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityvalue(_:)-8t0jl",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:)-1ub1j",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:)-32v44",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:)-sv4s",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:message:)-7y31o",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:message:)-8c7px",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:actions:message:)-g5b4",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:)-3la47",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:)-5wg3t",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:)-6nixu",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:message:)-1phke",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:message:)-7ktye",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(_:ispresented:presenting:actions:message:)-g90p",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alignmentguide(_:computevalue:)-1ve9y",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alignmentguide(_:computevalue:)-3tfef",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/aspectratio(_:contentmode:)-43jw5",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/aspectratio(_:contentmode:)-45tjn",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(_:in:fillstyle:)-2ytd5",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(_:in:fillstyle:)-72gf6",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(in:fillstyle:)-2u4zm",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/background(in:fillstyle:)-6lptp",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/badge(_:)-3lr7z",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/badge(_:)-5yvm4",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/badge(_:)-67xx3",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/badge(_:)-9eq3",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/buttonstyle(_:)-55awm",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/buttonstyle(_:)-xxn9",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-29o41",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-52rf7",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6kdje",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1hca9",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2u4rt",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-9pow9",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1s2b2",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-334zl",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3vkm3",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-502vs",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7p9j",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8sr2g",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contentmargins(_:_:for:)-2zh7y",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contentmargins(_:_:for:)-69oc8",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogsuppressiontoggle(_:issuppressed:)-4z20a",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogsuppressiontoggle(_:issuppressed:)-69o2q",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogsuppressiontoggle(_:issuppressed:)-7fv3m",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogconfirmationlabel(_:)-25qez",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogconfirmationlabel(_:)-5ffet",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogconfirmationlabel(_:)-8r6if",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogmessage(_:)-6jkqg",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogmessage(_:)-7pqlk",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogmessage(_:)-7togt",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-5u39r",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9570r",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-4sp3z",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-99dmo",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-6jrm6",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-80h8l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-31r2l",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-z39t",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporterfilenamelabel(_:)-6u29r",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporterfilenamelabel(_:)-75we0",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileexporterfilenamelabel(_:)-jzsq",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedobject(_:)-4sbm",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedobject(_:)-nvut",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedsceneobject(_:)-1f0xa",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedsceneobject(_:)-8excx",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedscenevalue(_:_:)-1ocvl",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedscenevalue(_:_:)-6467x",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedvalue(_:_:)-4shz",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/focusedvalue(_:_:)-5anf8",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/help(_:)-1ww08",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/help(_:)-6y3o1",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/help(_:)-qjjp",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyboardshortcut(_:)-2v5zr",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyboardshortcut(_:)-4kvdv",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linelimit(_:)-1a4o9",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linelimit(_:)-6lya2",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linelimit(_:)-7kyv8",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linelimit(_:)-9bke3",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listitemtint(_:)-6dnzy",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listitemtint(_:)-98nga",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:)-4u2et",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:)-5twtu",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:)-we5h",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:displaymode:)-17w8r",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:displaymode:)-4jx6x",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationbartitle(_:displaymode:)-j2a7",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdocument(_:preview:)-5mlls",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdocument(_:preview:)-72ezr",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdocument(_:preview:)-7vhto",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationdocument(_:preview:)-84z2q",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsubtitle(_:)-3a6u0",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsubtitle(_:)-3d4xj",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationsubtitle(_:)-6slms",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationtitle(_:)-52810",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationtitle(_:)-5d139",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationtitle(_:)-7re4z",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationtitle(_:)-888tb",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationtitle(_:)-9ghlr",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onchange(of:initial:_:)-4zs8w",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onchange(of:initial:_:)-9t9ph",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:delegate:)-4b4at",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:delegate:)-8hpjo",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:istargeted:perform:)-2eo17",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:istargeted:perform:)-4a597",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:istargeted:perform:)-9lfii",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ondrop(of:istargeted:perform:)-9ysiv",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpastecommand(of:perform:)-8d1a8",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpastecommand(of:perform:)-94y01",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpastecommand(of:validator:perform:)-2ju8x",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpastecommand(of:validator:perform:)-3xxu4",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/padding(_:)-24llz",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/padding(_:)-60kk3",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/renameaction(_:)-10z8u",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/renameaction(_:)-84oax",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/safeareainset(edge:alignment:spacing:content:)-4uiut",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/safeareainset(edge:alignment:spacing:content:)-8dv8j",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/safeareapadding(_:)-7d0pq",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/safeareapadding(_:)-9m904",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scaleeffect(_:anchor:)-7klfu",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scaleeffect(_:anchor:)-km4o",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-38ise",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-3jxor",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4cvrd",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:placement:prompt:token:)-593df",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:placement:prompt:token:)-597z9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:editabletokens:placement:prompt:token:)-8e854",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:ispresented:placement:prompt:)-2p69y",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:ispresented:placement:prompt:)-37rnh",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:ispresented:placement:prompt:)-7g0cp",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:)-284ul",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:)-2eoff",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:)-992ff",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:suggestions:)-9fj9b",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:suggestions:)-9p3l5",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:placement:prompt:suggestions:)-zzl5",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5r5xf",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-5rrps",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-bdg0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:placement:prompt:token:)-16wk9",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:placement:prompt:token:)-2xk58",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:placement:prompt:token:)-4z83g",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-10j6w",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-43llu",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7dk67",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-23rcj",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-5sgtl",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-aali",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbar(content:)-2h8z3",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbar(content:)-kdh1",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/typeselectequivalent(_:)-2tavh",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/typeselectequivalent(_:)-7emv1",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/typeselectequivalent(_:)-9qmih",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/typesettinglanguage(_:isenabled:)-76gl9",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/typesettinglanguage(_:isenabled:)-8cqe3",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncstatusview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncstatusview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncstatusview",
            "title" : "SyncStatusView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/init(document:)",
                "title" : "init(document: MeetingNotesDocument)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(activationpoint:)-6c2p3",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(activationpoint:)-9l6ya",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-6lvxj",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-9c1t6",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaction(named:_:)-9mv77",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactivationpoint(_:)-8ugp6",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityactivationpoint(_:)-8zy2k",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-4mzhd",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-4vao9",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-5m2jz",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-5mu4z",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-6lv4c",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-6sy5r",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-8ghih",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitycustomcontent(_:_:importance:)-9uiik",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-2f8cq",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-8p84t",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityhint(_:)-8vpf1",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-22bjq",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-3fjfk",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityinputlabels(_:)-otyg",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-2mk9u",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-4gqty",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabel(_:)-4hciu",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-3ejmt",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-661gi",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-7n4jk",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:)-8whxq",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3cr12",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4py9v",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-5h34n",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entryid:entrylabel:)-qa9x",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-1qbi6",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-21763",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-66gci",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:entries:entrylabel:)-6dwit",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-3xgt4",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-6kfcz",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-7f4kw",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotor(_:textranges:)-7wtaa",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-2lb63",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-53c6v",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityvalue(_:)-62kfp",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-39bx4",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-5lzyh",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:)-9u4c8",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-3aj2p",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-6arzi",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:actions:message:)-n3cj",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-46ctu",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-66lve",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:)-7evkv",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-63ge9",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-6ihf0",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(_:ispresented:presenting:actions:message:)-8rven",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alignmentguide(_:computevalue:)-359ju",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alignmentguide(_:computevalue:)-89i1c",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/aspectratio(_:contentmode:)-5vi3b",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/aspectratio(_:contentmode:)-6sttl",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:in:fillstyle:)-4ipqh",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(_:in:fillstyle:)-5qfut",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(in:fillstyle:)-5y190",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/background(in:fillstyle:)-9bh55",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-3e24x",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-41hcp",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-44b60",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badge(_:)-e83f",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonstyle(_:)-9pi7t",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/buttonstyle(_:)-9tuaw",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-3hvr2",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5584n",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qu6f",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-2y1nk",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3bjdv",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-85gqd",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1wjg9",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-28p5m",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-34go5",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-29n11",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-6e1v2",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-9ao6b",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:_:for:)-1yb1h",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:_:for:)-42qtd",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-17fj7",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-8tyun",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(_:issuppressed:)-8y43c",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-32vhx",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-4ojkx",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogconfirmationlabel(_:)-51ocy",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-2slmj",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-3ewlz",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogmessage(_:)-6bv5s",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-4rgw6",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8t1gm",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-22co4",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-kgn9",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7b9oh",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-7ofcw",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-4rshk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-70h6d",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-1ezll",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-70kuk",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileexporterfilenamelabel(_:)-71nll",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedobject(_:)-8kcai",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedobject(_:)-xqxy",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedsceneobject(_:)-1elka",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedsceneobject(_:)-37f3q",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedscenevalue(_:_:)-66ryz",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedscenevalue(_:_:)-7v5tc",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:_:)-7z43q",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/focusedvalue(_:_:)-g3m1",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-22uh3",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-2j7m3",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/help(_:)-80hbh",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:)-6sg7d",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:)-8vzpx",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-3qhqz",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-3t9po",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-564oe",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:)-60rwa",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listitemtint(_:)-2buqt",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listitemtint(_:)-6o3g5",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-1zej0",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-6zbql",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:)-85tud",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-12mq9",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-1jfas",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationbartitle(_:displaymode:)-3jd6h",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-10uyw",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-1etta",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-7gpsd",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationdocument(_:preview:)-7wjtc",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-72ss3",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-87ux1",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationsubtitle(_:)-970d5",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-4dqpd",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-6urx",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-6x5yw",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-74tw0",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationtitle(_:)-h9kf",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:initial:_:)-6xnaf",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:initial:_:)-6yb2n",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:delegate:)-1kkuw",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:delegate:)-2kum4",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-70hyl",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-7mhgy",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-868j1",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ondrop(of:istargeted:perform:)-pqkl",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:perform:)-4xr26",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:perform:)-5ygn3",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:validator:perform:)-15e6u",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpastecommand(of:validator:perform:)-7nh1y",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:)-4396o",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:)-93slg",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/renameaction(_:)-2zjmc",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/renameaction(_:)-d98f",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareainset(edge:alignment:spacing:content:)-3iqdo",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareainset(edge:alignment:spacing:content:)-9jphy",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:)-4mdx5",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:)-598j5",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(_:anchor:)-5hoz6",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(_:anchor:)-7bgpo",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2bvhx",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-4ptmj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-drq6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-1kwk6",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-2g858",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:editabletokens:placement:prompt:token:)-6lar2",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-29z7e",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-5fuky",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:ispresented:placement:prompt:)-9bp18",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-3z0uq",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-8guxf",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:)-eob3",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-414mc",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-6bscy",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:placement:prompt:suggestions:)-73o2l",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-1qxyt",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-95ijh",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9hdxy",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-26lbp",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-2t4t3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:placement:prompt:token:)-6rgd2",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4fnjb",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4hewn",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-5sgii",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4w3d6",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-fnh8",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-i7ox",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(content:)-4wi3p",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(content:)-rdom",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-62n2y",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-7skgh",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typeselectequivalent(_:)-7tn46",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typesettinglanguage(_:isenabled:)-1nzt6",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/typesettinglanguage(_:isenabled:)-7i2ie",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeview",
            "title" : "MergeView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/exportview\/init(document:)",
                "title" : "init(document: MeetingNotesDocument)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/exportview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/exportview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(activationpoint:)-1t858",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(activationpoint:)-8wjr5",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaction(named:_:)-4c1l5",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaction(named:_:)-54m8m",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaction(named:_:)-l9ek",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityactivationpoint(_:)-43ay8",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityactivationpoint(_:)-6i6dx",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-15vfz",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-1ezuj",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-5k95g",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-677s6",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-7r92h",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-9dl4g",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-fw68",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitycustomcontent(_:_:importance:)-lpw3",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityhint(_:)-1x8c4",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityhint(_:)-44g6p",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityhint(_:)-6np5k",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityinputlabels(_:)-3jssx",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityinputlabels(_:)-3k80a",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityinputlabels(_:)-7pr5m",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitylabel(_:)-1mk9c",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitylabel(_:)-8meto",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitylabel(_:)-vm4e",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:)-1s0nm",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:)-2abal",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:)-3iqce",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:)-3yj3v",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6j5xh",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6rx9x",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8mu46",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9p8o2",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entrylabel:)-1w4yf",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entrylabel:)-2l9z5",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entrylabel:)-7ugi6",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:entries:entrylabel:)-8w5tp",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:textranges:)-2mtaw",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:textranges:)-5d9z6",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:textranges:)-5wzkp",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotor(_:textranges:)-9ceug",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityvalue(_:)-75lvr",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityvalue(_:)-8aeuz",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityvalue(_:)-8lcaf",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:)-1dcp7",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:)-61vqh",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:)-6h3sh",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:message:)-1lsyl",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:message:)-g0yd",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:actions:message:)-r0gh",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:)-6b59w",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:)-7e1eq",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:)-7l7or",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:message:)-4e6gw",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:message:)-6xi8i",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(_:ispresented:presenting:actions:message:)-8sjy9",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alignmentguide(_:computevalue:)-137dh",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alignmentguide(_:computevalue:)-3qpw8",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/aspectratio(_:contentmode:)-49xp9",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/aspectratio(_:contentmode:)-4gtvd",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(_:in:fillstyle:)-298v5",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(_:in:fillstyle:)-4uovi",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(in:fillstyle:)-27aej",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/background(in:fillstyle:)-5dc8f",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/badge(_:)-1ixxo",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/badge(_:)-2a0g8",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/badge(_:)-94h6d",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/badge(_:)-9c3wl",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/buttonstyle(_:)-1jpy2",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/buttonstyle(_:)-8vdvx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-141pi",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4z3ew",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-82vbe",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-10eq1",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-1oi1e",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3gmam",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4979g",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-68kpx",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7psr0",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5alid",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5f6f4",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7ch4l",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contentmargins(_:_:for:)-12na7",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contentmargins(_:_:for:)-2l7l5",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogsuppressiontoggle(_:issuppressed:)-2qkz2",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogsuppressiontoggle(_:issuppressed:)-6tzvc",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogsuppressiontoggle(_:issuppressed:)-8w36v",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogconfirmationlabel(_:)-38psn",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogconfirmationlabel(_:)-6isz8",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogconfirmationlabel(_:)-9p5fm",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogmessage(_:)-3beit",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogmessage(_:)-5cbsg",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogmessage(_:)-nt9x",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3onzg",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-7jh49",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6lilr",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-8extm",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-37uam",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-61ork",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-14prk",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-49bbs",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporterfilenamelabel(_:)-1ajlu",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporterfilenamelabel(_:)-8i7sj",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileexporterfilenamelabel(_:)-geou",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedobject(_:)-1gkpl",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedobject(_:)-4s8vq",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedsceneobject(_:)-2xy2v",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedsceneobject(_:)-9jd7a",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedscenevalue(_:_:)-6y0xo",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedscenevalue(_:_:)-jnot",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedvalue(_:_:)-1tl1p",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/focusedvalue(_:_:)-7wpg1",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/help(_:)-2guh0",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/help(_:)-7cv0t",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/help(_:)-7m9u8",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyboardshortcut(_:)-3twm9",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyboardshortcut(_:)-9deyw",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linelimit(_:)-2yfcq",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linelimit(_:)-3eibd",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linelimit(_:)-7kcmh",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linelimit(_:)-9o7nc",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listitemtint(_:)-2jtkg",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listitemtint(_:)-7fc12",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:)-39h5i",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:)-5plrd",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:)-9a1rv",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:displaymode:)-3hbab",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:displaymode:)-4cqlc",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationbartitle(_:displaymode:)-5o1bq",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdocument(_:preview:)-2oufm",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdocument(_:preview:)-44dmb",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdocument(_:preview:)-9epyz",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationdocument(_:preview:)-ion1",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsubtitle(_:)-1e3ja",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsubtitle(_:)-8pepe",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationsubtitle(_:)-aig5",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationtitle(_:)-34zp6",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationtitle(_:)-45we9",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationtitle(_:)-4rorc",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationtitle(_:)-861b5",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationtitle(_:)-rmce",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onchange(of:initial:_:)-9u4pk",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onchange(of:initial:_:)-eb6g",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:delegate:)-4api3",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:delegate:)-78n7t",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:istargeted:perform:)-2i4h4",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:istargeted:perform:)-323jo",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:istargeted:perform:)-7vjnw",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ondrop(of:istargeted:perform:)-9d6fr",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpastecommand(of:perform:)-1trl",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpastecommand(of:perform:)-3h9ai",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpastecommand(of:validator:perform:)-3lj0u",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpastecommand(of:validator:perform:)-5fkdd",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/padding(_:)-2t7at",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/padding(_:)-56tn6",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/renameaction(_:)-6nsb6",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/renameaction(_:)-84up5",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/safeareainset(edge:alignment:spacing:content:)-7wjj6",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/safeareainset(edge:alignment:spacing:content:)-9djnj",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/safeareapadding(_:)-8nalm",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/safeareapadding(_:)-8y79x",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scaleeffect(_:anchor:)-38kv8",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scaleeffect(_:anchor:)-3aegw",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-6kk4c",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-8r7ch",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-99z4p",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:placement:prompt:token:)-22eg9",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:placement:prompt:token:)-6ljrz",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:editabletokens:placement:prompt:token:)-838t1",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:ispresented:placement:prompt:)-1s581",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:ispresented:placement:prompt:)-2rbrc",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:ispresented:placement:prompt:)-6bw38",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:)-3k76n",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:)-4wcc",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:)-9mikk",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:suggestions:)-1xpu",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:suggestions:)-4ekn2",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:placement:prompt:suggestions:)-859wj",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:ispresented:placement:prompt:token:)-3kb6v",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:ispresented:placement:prompt:token:)-3kd4w",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:ispresented:placement:prompt:token:)-9dlo3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:placement:prompt:token:)-2mqe3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:placement:prompt:token:)-50mpo",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:placement:prompt:token:)-6si3t",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-4jyqi",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7wh4i",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-9mxng",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2n0ax",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-6aon3",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-89dge",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbar(content:)-2g9sc",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbar(content:)-pprm",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/typeselectequivalent(_:)-288mt",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/typeselectequivalent(_:)-3dzd",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/typeselectequivalent(_:)-43ojw",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/typesettinglanguage(_:isenabled:)-56f38",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/typesettinglanguage(_:isenabled:)-75uag",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/exportview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/exportview",
            "title" : "ExportView",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/websocketstatusview\/init(document:)",
                "title" : "init(document: MeetingNotesDocument)",
                "type" : "init"
              },
              {
                "title" : "Instance Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/websocketstatusview\/body",
                "title" : "var body: some View",
                "type" : "property"
              },
              {
                "path" : "\/documentation\/meetingnotes\/websocketstatusview\/document",
                "title" : "var document: MeetingNotesDocument",
                "type" : "property"
              },
              {
                "title" : "Enumerations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Enumeration Cases",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/automerge",
                    "title" : "case automerge",
                    "type" : "case"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/local",
                    "title" : "case local",
                    "type" : "case"
                  },
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/init(rawvalue:)",
                    "title" : "init?(rawValue: String)",
                    "type" : "init"
                  },
                  {
                    "title" : "Instance Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/id",
                    "title" : "var id: `Self`",
                    "type" : "property"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/url",
                    "title" : "var url: URL",
                    "type" : "property"
                  },
                  {
                    "title" : "Default Implementations",
                    "type" : "groupMarker"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Operators",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/!=(_:_:)",
                        "title" : "static func != (Self, Self) -> Bool",
                        "type" : "op"
                      }
                    ],
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/equatable-implementations",
                    "title" : "Equatable Implementations",
                    "type" : "symbol"
                  },
                  {
                    "children" : [
                      {
                        "title" : "Instance Properties",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/hashvalue",
                        "title" : "var hashValue: Int",
                        "type" : "property"
                      },
                      {
                        "title" : "Instance Methods",
                        "type" : "groupMarker"
                      },
                      {
                        "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/hash(into:)",
                        "title" : "func hash(into: inout Hasher)",
                        "type" : "method"
                      }
                    ],
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets\/rawrepresentable-implementations",
                    "title" : "RawRepresentable Implementations",
                    "type" : "symbol"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/websocketstatusview\/synctargets",
                "title" : "WebSocketStatusView.SyncTargets",
                "type" : "enum"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Instance Methods",
                    "type" : "groupMarker"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accentcolor(_:)",
                    "title" : "func accentColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(activationpoint:)-3dx78",
                    "title" : "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(activationpoint:)-9s3su",
                    "title" : "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(addtraits:)",
                    "title" : "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(hidden:)",
                    "title" : "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(hint:)",
                    "title" : "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(identifier:)",
                    "title" : "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(inputlabels:)",
                    "title" : "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(label:)",
                    "title" : "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(removetraits:)",
                    "title" : "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(selectionidentifier:)",
                    "title" : "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(sortpriority:)",
                    "title" : "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibility(value:)",
                    "title" : "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaction(_:_:)",
                    "title" : "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaction(action:label:)",
                    "title" : "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaction(named:_:)-1xx9i",
                    "title" : "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaction(named:_:)-55yu7",
                    "title" : "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaction(named:_:)-6kxde",
                    "title" : "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityactions(_:)",
                    "title" : "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityactivationpoint(_:)-1kcup",
                    "title" : "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityactivationpoint(_:)-3xzwu",
                    "title" : "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityaddtraits(_:)",
                    "title" : "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityadjustableaction(_:)",
                    "title" : "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitychartdescriptor(_:)",
                    "title" : "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitychildren(children:)",
                    "title" : "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-2f97r",
                    "title" : "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-3lxcq",
                    "title" : "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-4fkap",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-4kgj0",
                    "title" : "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-672el",
                    "title" : "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-72bjc",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-936h9",
                    "title" : "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitycustomcontent(_:_:importance:)-r3jd",
                    "title" : "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitydirecttouch(_:options:)",
                    "title" : "func accessibilityDirectTouch(Bool, options: AccessibilityDirectTouchOptions) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityelement(children:)",
                    "title" : "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityfocused(_:)",
                    "title" : "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityfocused(_:equals:)",
                    "title" : "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityheading(_:)",
                    "title" : "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityhidden(_:)",
                    "title" : "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityhint(_:)-4fra1",
                    "title" : "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityhint(_:)-4phiq",
                    "title" : "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityhint(_:)-7725e",
                    "title" : "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityidentifier(_:)",
                    "title" : "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityignoresinvertcolors(_:)",
                    "title" : "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityinputlabels(_:)-23xjv",
                    "title" : "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityinputlabels(_:)-5n0md",
                    "title" : "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityinputlabels(_:)-8k1tu",
                    "title" : "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitylabel(_:)-1ygd8",
                    "title" : "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitylabel(_:)-3l86n",
                    "title" : "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitylabel(_:)-52u8e",
                    "title" : "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitylabeledpair(role:id:in:)",
                    "title" : "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitylinkedgroup(id:in:)",
                    "title" : "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityremovetraits(_:)",
                    "title" : "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrepresentation(representation:)",
                    "title" : "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrespondstouserinteraction(_:)",
                    "title" : "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:)-3krvx",
                    "title" : "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:)-5wpws",
                    "title" : "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:)-6yxty",
                    "title" : "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:)-9c9go",
                    "title" : "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1wiay",
                    "title" : "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-3ie5c",
                    "title" : "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-4abei",
                    "title" : "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9gka3",
                    "title" : "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entrylabel:)-2knja",
                    "title" : "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entrylabel:)-3ij5c",
                    "title" : "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entrylabel:)-6zzuy",
                    "title" : "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:entries:entrylabel:)-815ua",
                    "title" : "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:textranges:)-2rrgt",
                    "title" : "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:textranges:)-3iphx",
                    "title" : "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:textranges:)-411uz",
                    "title" : "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotor(_:textranges:)-79mga",
                    "title" : "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityrotorentry(id:in:)",
                    "title" : "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityscrollaction(_:)",
                    "title" : "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityshowslargecontentviewer()",
                    "title" : "func accessibilityShowsLargeContentViewer() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityshowslargecontentviewer(_:)",
                    "title" : "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitysortpriority(_:)",
                    "title" : "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilitytextcontenttype(_:)",
                    "title" : "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityvalue(_:)-478wg",
                    "title" : "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityvalue(_:)-5l9xj",
                    "title" : "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityvalue(_:)-9cq2g",
                    "title" : "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/accessibilityzoomaction(_:)",
                    "title" : "func accessibilityZoomAction((AccessibilityZoomGestureAction) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:)-2l9n6",
                    "title" : "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:)-49o8s",
                    "title" : "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:)-5wp48",
                    "title" : "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:message:)-2k0r8",
                    "title" : "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:message:)-4zv0y",
                    "title" : "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:actions:message:)-5u5ri",
                    "title" : "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:)-1h2xz",
                    "title" : "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:)-77d5s",
                    "title" : "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:)-9cip4",
                    "title" : "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:message:)-1aaqk",
                    "title" : "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:message:)-2j7yi",
                    "title" : "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(_:ispresented:presenting:actions:message:)-705cd",
                    "title" : "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(ispresented:content:)",
                    "title" : "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(ispresented:error:actions:)",
                    "title" : "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(ispresented:error:actions:message:)",
                    "title" : "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alert(item:content:)",
                    "title" : "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alignmentguide(_:computevalue:)-9fnu5",
                    "title" : "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alignmentguide(_:computevalue:)-9nt33",
                    "title" : "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alloweddynamicrange(_:)",
                    "title" : "func allowedDynamicRange(Image.DynamicRange?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/allowshittesting(_:)",
                    "title" : "func allowsHitTesting(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/allowstightening(_:)",
                    "title" : "func allowsTightening(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/alternatingrowbackgrounds(_:)",
                    "title" : "func alternatingRowBackgrounds(AlternatingRowBackgroundBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/anchorpreference(key:value:transform:)",
                    "title" : "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/animation(_:)",
                    "title" : "func animation(Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/animation(_:body:)",
                    "title" : "func animation<V>(Animation?, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/animation(_:value:)",
                    "title" : "func animation<V>(Animation?, value: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/aspectratio(_:contentmode:)-219x5",
                    "title" : "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/aspectratio(_:contentmode:)-9o3y0",
                    "title" : "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/autocorrectiondisabled(_:)",
                    "title" : "func autocorrectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(_:alignment:)",
                    "title" : "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(_:ignoressafeareaedges:)",
                    "title" : "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(_:in:fillstyle:)-17tj5",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(_:in:fillstyle:)-z6t1",
                    "title" : "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(alignment:content:)",
                    "title" : "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(ignoressafeareaedges:)",
                    "title" : "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(in:fillstyle:)-7sfu5",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/background(in:fillstyle:)-wduf",
                    "title" : "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/backgroundpreferencevalue(_:_:)",
                    "title" : "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title" : "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/backgroundstyle(_:)",
                    "title" : "func backgroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/badge(_:)-3m9b1",
                    "title" : "func badge(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/badge(_:)-3rkdt",
                    "title" : "func badge(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/badge(_:)-4bg0b",
                    "title" : "func badge(LocalizedStringKey?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/badge(_:)-4xkeb",
                    "title" : "func badge<S>(S?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/badgeprominence(_:)",
                    "title" : "func badgeProminence(BadgeProminence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/baselineoffset(_:)",
                    "title" : "func baselineOffset(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/blendmode(_:)",
                    "title" : "func blendMode(BlendMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/blur(radius:opaque:)",
                    "title" : "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/bold(_:)",
                    "title" : "func bold(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/border(_:width:)",
                    "title" : "func border<S>(S, width: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/brightness(_:)",
                    "title" : "func brightness(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/buttonbordershape(_:)",
                    "title" : "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/buttonrepeatbehavior(_:)",
                    "title" : "func buttonRepeatBehavior(ButtonRepeatBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/buttonstyle(_:)-6qala",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/buttonstyle(_:)-7nlrx",
                    "title" : "func buttonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/clipshape(_:style:)",
                    "title" : "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/clipped(antialiased:)",
                    "title" : "func clipped(antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/coloreffect(_:isenabled:)",
                    "title" : "func colorEffect(Shader, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/colorinvert()",
                    "title" : "func colorInvert() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/colormultiply(_:)",
                    "title" : "func colorMultiply(Color) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/colorscheme(_:)",
                    "title" : "func colorScheme(ColorScheme) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/compositinggroup()",
                    "title" : "func compositingGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1tdpq",
                    "title" : "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-30q2p",
                    "title" : "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-4dmc3",
                    "title" : "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-43hge",
                    "title" : "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-72gkf",
                    "title" : "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-bhcj",
                    "title" : "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4jacf",
                    "title" : "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4va4w",
                    "title" : "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-7wy6s",
                    "title" : "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-1sall",
                    "title" : "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3dhar",
                    "title" : "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4vbjo",
                    "title" : "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containerbackground(_:for:)",
                    "title" : "func containerBackground<S>(S, for: ContainerBackgroundPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containerbackground(for:alignment:content:)",
                    "title" : "func containerBackground<V>(for: ContainerBackgroundPlacement, alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containerrelativeframe(_:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containerrelativeframe(_:alignment:_:)",
                    "title" : "func containerRelativeFrame(Axis.Set, alignment: Alignment, (CGFloat, Axis) -> CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containerrelativeframe(_:count:span:spacing:alignment:)",
                    "title" : "func containerRelativeFrame(Axis.Set, count: Int, span: Int, spacing: CGFloat, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/containershape(_:)",
                    "title" : "func containerShape<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contentmargins(_:_:for:)-2yjjl",
                    "title" : "func contentMargins(Edge.Set, EdgeInsets, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contentmargins(_:_:for:)-5l1h8",
                    "title" : "func contentMargins(Edge.Set, CGFloat?, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contentmargins(_:for:)",
                    "title" : "func contentMargins(CGFloat, for: ContentMarginPlacement) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contentshape(_:_:eofill:)",
                    "title" : "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contentshape(_:eofill:)",
                    "title" : "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contenttransition(_:)",
                    "title" : "func contentTransition(ContentTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contextmenu(_:)",
                    "title" : "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contextmenu(forselectiontype:menu:primaryaction:)",
                    "title" : "func contextMenu<I, M>(forSelectionType: I.Type, menu: (Set<I>) -> M, primaryAction: ((Set<I>) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contextmenu(menuitems:)",
                    "title" : "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contextmenu(menuitems:preview:)",
                    "title" : "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/contrast(_:)",
                    "title" : "func contrast(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/controlgroupstyle(_:)",
                    "title" : "func controlGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/controlsize(_:)",
                    "title" : "func controlSize(ControlSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/coordinatespace(_:)",
                    "title" : "func coordinateSpace(NamedCoordinateSpace) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/coordinatespace(name:)",
                    "title" : "func coordinateSpace<T>(name: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/copyable(_:)",
                    "title" : "func copyable<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/cornerradius(_:antialiased:)",
                    "title" : "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/cuttable(for:action:)",
                    "title" : "func cuttable<T>(for: T.Type, action: () -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/datepickerstyle(_:)",
                    "title" : "func datePickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/defaultappstorage(_:)",
                    "title" : "func defaultAppStorage(UserDefaults) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/defaultfocus(_:_:priority:)",
                    "title" : "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/defaultscrollanchor(_:)",
                    "title" : "func defaultScrollAnchor(UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/deletedisabled(_:)",
                    "title" : "func deleteDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogicon(_:)",
                    "title" : "func dialogIcon(Image?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogseverity(_:)",
                    "title" : "func dialogSeverity(DialogSeverity) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogsuppressiontoggle(_:issuppressed:)-2eoam",
                    "title" : "func dialogSuppressionToggle(LocalizedStringKey, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogsuppressiontoggle(_:issuppressed:)-49dyn",
                    "title" : "func dialogSuppressionToggle(Text, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogsuppressiontoggle(_:issuppressed:)-fanx",
                    "title" : "func dialogSuppressionToggle<S>(S, isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dialogsuppressiontoggle(issuppressed:)",
                    "title" : "func dialogSuppressionToggle(isSuppressed: Binding<Bool>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/disableautocorrection(_:)",
                    "title" : "func disableAutocorrection(Bool?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/disabled(_:)",
                    "title" : "func disabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/disclosuregroupstyle(_:)",
                    "title" : "func disclosureGroupStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/distortioneffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func distortionEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/draggable(_:)",
                    "title" : "func draggable<T>(() -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/draggable(_:preview:)",
                    "title" : "func draggable<V, T>(() -> T, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/drawinggroup(opaque:colormode:)",
                    "title" : "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dropdestination(for:action:istargeted:)",
                    "title" : "func dropDestination<T>(for: T.Type, action: ([T], CGPoint) -> Bool, isTargeted: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/dynamictypesize(_:)",
                    "title" : "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/edgesignoringsafearea(_:)",
                    "title" : "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/environment(_:)",
                    "title" : "func environment<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/environment(_:_:)",
                    "title" : "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/environmentobject(_:)",
                    "title" : "func environmentObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/exportabletoservices(_:)",
                    "title" : "func exportableToServices<T>(() -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/exportabletoservices(_:onedit:)",
                    "title" : "func exportableToServices<T>(() -> [T], onEdit: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/exportsitemproviders(_:onexport:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/exportsitemproviders(_:onexport:onedit:)",
                    "title" : "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogbrowseroptions(_:)",
                    "title" : "func fileDialogBrowserOptions(FileDialogBrowserOptions) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogconfirmationlabel(_:)-2uujd",
                    "title" : "func fileDialogConfirmationLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogconfirmationlabel(_:)-8ppof",
                    "title" : "func fileDialogConfirmationLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogconfirmationlabel(_:)-8wzm4",
                    "title" : "func fileDialogConfirmationLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogcustomizationid(_:)",
                    "title" : "func fileDialogCustomizationID(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogdefaultdirectory(_:)",
                    "title" : "func fileDialogDefaultDirectory(URL?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogimportsunresolvedaliases(_:)",
                    "title" : "func fileDialogImportsUnresolvedAliases(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogmessage(_:)-3gn1",
                    "title" : "func fileDialogMessage(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogmessage(_:)-3mvja",
                    "title" : "func fileDialogMessage<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogmessage(_:)-5uzug",
                    "title" : "func fileDialogMessage(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filedialogurlenabled(_:)",
                    "title" : "func fileDialogURLEnabled(Predicate<URL>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-6z21f",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-702ju",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-51oc5",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:document:contenttypes:defaultfilename:oncompletion:oncancellation:)-6d9px",
                    "title" : "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-23p38",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-8tsis",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-186c2",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:documents:contenttypes:oncompletion:oncancellation:)-kzob",
                    "title" : "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:item:contenttypes:defaultfilename:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<T>(isPresented: Binding<Bool>, item: T?, contentTypes: [UTType], defaultFilename: String?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporter(ispresented:items:contenttypes:oncompletion:oncancellation:)",
                    "title" : "func fileExporter<C, T>(isPresented: Binding<Bool>, items: C, contentTypes: [UTType], onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporterfilenamelabel(_:)-47i3o",
                    "title" : "func fileExporterFilenameLabel(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporterfilenamelabel(_:)-5pusp",
                    "title" : "func fileExporterFilenameLabel(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileexporterfilenamelabel(_:)-nxzs",
                    "title" : "func fileExporterFilenameLabel<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:oncancellation:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title" : "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filemover(ispresented:file:oncompletion:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filemover(ispresented:file:oncompletion:oncancellation:)",
                    "title" : "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filemover(ispresented:files:oncompletion:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/filemover(ispresented:files:oncompletion:oncancellation:)",
                    "title" : "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], any Error>) -> Void, onCancellation: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fixedsize()",
                    "title" : "func fixedSize() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fixedsize(horizontal:vertical:)",
                    "title" : "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title" : "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focuseffectdisabled(_:)",
                    "title" : "func focusEffectDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusscope(_:)",
                    "title" : "func focusScope(Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focussection()",
                    "title" : "func focusSection() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusable(_:)",
                    "title" : "func focusable(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusable(_:interactions:)",
                    "title" : "func focusable(Bool, interactions: FocusInteractions) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusable(_:onfocuschange:)",
                    "title" : "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focused(_:)",
                    "title" : "func focused(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focused(_:equals:)",
                    "title" : "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedobject(_:)-4x9fj",
                    "title" : "func focusedObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedobject(_:)-9lfv7",
                    "title" : "func focusedObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedsceneobject(_:)-2xx6z",
                    "title" : "func focusedSceneObject<T>(T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedsceneobject(_:)-3kjuc",
                    "title" : "func focusedSceneObject<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedscenevalue(_:_:)-3e953",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedscenevalue(_:_:)-9kx9u",
                    "title" : "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedvalue(_:)",
                    "title" : "func focusedValue<T>(T?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedvalue(_:_:)-469ib",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/focusedvalue(_:_:)-4lks8",
                    "title" : "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/font(_:)",
                    "title" : "func font(Font?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fontdesign(_:)",
                    "title" : "func fontDesign(Font.Design?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fontweight(_:)",
                    "title" : "func fontWeight(Font.Weight?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/fontwidth(_:)",
                    "title" : "func fontWidth(Font.Width?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/foregroundcolor(_:)",
                    "title" : "func foregroundColor(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/foregroundstyle(_:)",
                    "title" : "func foregroundStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/foregroundstyle(_:_:)",
                    "title" : "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/foregroundstyle(_:_:_:)",
                    "title" : "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/formstyle(_:)",
                    "title" : "func formStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/frame()",
                    "title" : "func frame() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title" : "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/frame(width:height:alignment:)",
                    "title" : "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gaugestyle(_:)",
                    "title" : "func gaugeStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/geometrygroup()",
                    "title" : "func geometryGroup() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gesture(_:including:)",
                    "title" : "func gesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/grayscale(_:)",
                    "title" : "func grayscale(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gridcellanchor(_:)",
                    "title" : "func gridCellAnchor(UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gridcellcolumns(_:)",
                    "title" : "func gridCellColumns(Int) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gridcellunsizedaxes(_:)",
                    "title" : "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/gridcolumnalignment(_:)",
                    "title" : "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/groupboxstyle(_:)",
                    "title" : "func groupBoxStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/handlesexternalevents(preferring:allowing:)",
                    "title" : "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/headerprominence(_:)",
                    "title" : "func headerProminence(Prominence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/help(_:)-1wvi7",
                    "title" : "func help(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/help(_:)-2dw6l",
                    "title" : "func help<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/help(_:)-7bak1",
                    "title" : "func help(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/hidden()",
                    "title" : "func hidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/highprioritygesture(_:including:)",
                    "title" : "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/horizontalradiogrouplayout()",
                    "title" : "func horizontalRadioGroupLayout() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/huerotation(_:)",
                    "title" : "func hueRotation(Angle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/id(_:)",
                    "title" : "func id<ID>(ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ignoressafearea(_:edges:)",
                    "title" : "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/imagescale(_:)",
                    "title" : "func imageScale(Image.Scale) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/importablefromservices(for:action:)",
                    "title" : "func importableFromServices<T>(for: T.Type, action: ([T]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/importsitemproviders(_:onimport:)",
                    "title" : "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/inspector(ispresented:content:)",
                    "title" : "func inspector<V>(isPresented: Binding<Bool>, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/inspectorcolumnwidth(_:)",
                    "title" : "func inspectorColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/inspectorcolumnwidth(min:ideal:max:)",
                    "title" : "func inspectorColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/interactionactivitytrackingtag(_:)",
                    "title" : "func interactionActivityTrackingTag(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/interactivedismissdisabled(_:)",
                    "title" : "func interactiveDismissDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/invalidatablecontent(_:)",
                    "title" : "func invalidatableContent(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/italic(_:)",
                    "title" : "func italic(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/itemprovider(_:)",
                    "title" : "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/kerning(_:)",
                    "title" : "func kerning(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyboardshortcut(_:)-26vlq",
                    "title" : "func keyboardShortcut(KeyboardShortcut?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyboardshortcut(_:)-6btas",
                    "title" : "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyboardshortcut(_:modifiers:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyboardshortcut(_:modifiers:localization:)",
                    "title" : "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyframeanimator(initialvalue:repeating:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, repeating: Bool, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/keyframeanimator(initialvalue:trigger:content:keyframes:)",
                    "title" : "func keyframeAnimator<Value>(initialValue: Value, trigger: some Equatable, content: (PlaceholderContentView<Self>, Value) -> some View, keyframes: (Value) -> some Keyframes) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/labelstyle(_:)",
                    "title" : "func labelStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/labeledcontentstyle(_:)",
                    "title" : "func labeledContentStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/labelshidden()",
                    "title" : "func labelsHidden() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/layereffect(_:maxsampleoffset:isenabled:)",
                    "title" : "func layerEffect(Shader, maxSampleOffset: CGSize, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/layoutdirectionbehavior(_:)",
                    "title" : "func layoutDirectionBehavior(LayoutDirectionBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/layoutpriority(_:)",
                    "title" : "func layoutPriority(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/layoutvalue(key:value:)",
                    "title" : "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linelimit(_:)-2bptw",
                    "title" : "func lineLimit(ClosedRange<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linelimit(_:)-4tizo",
                    "title" : "func lineLimit(PartialRangeFrom<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linelimit(_:)-676rm",
                    "title" : "func lineLimit(Int?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linelimit(_:)-zrlb",
                    "title" : "func lineLimit(PartialRangeThrough<Int>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linelimit(_:reservesspace:)",
                    "title" : "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/linespacing(_:)",
                    "title" : "func lineSpacing(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listitemtint(_:)-43e87",
                    "title" : "func listItemTint(ListItemTint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listitemtint(_:)-5z1nm",
                    "title" : "func listItemTint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listrowbackground(_:)",
                    "title" : "func listRowBackground<V>(V?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listrowinsets(_:)",
                    "title" : "func listRowInsets(EdgeInsets?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listrowseparator(_:edges:)",
                    "title" : "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listrowseparatortint(_:edges:)",
                    "title" : "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listsectionseparator(_:edges:)",
                    "title" : "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/listsectionseparatortint(_:edges:)",
                    "title" : "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/liststyle(_:)",
                    "title" : "func listStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/luminancetoalpha()",
                    "title" : "func luminanceToAlpha() -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/mask(_:)",
                    "title" : "func mask<Mask>(Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/mask(alignment:_:)",
                    "title" : "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title" : "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/menuactiondismissbehavior(_:)",
                    "title" : "func menuActionDismissBehavior(MenuActionDismissBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/menubuttonstyle(_:)",
                    "title" : "func menuButtonStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/menuindicator(_:)",
                    "title" : "func menuIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/menuorder(_:)",
                    "title" : "func menuOrder(MenuOrder) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/menustyle(_:)",
                    "title" : "func menuStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/minimumscalefactor(_:)",
                    "title" : "func minimumScaleFactor(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/modifier(_:)",
                    "title" : "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/monospaced(_:)",
                    "title" : "func monospaced(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/monospaceddigit()",
                    "title" : "func monospacedDigit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/movedisabled(_:)",
                    "title" : "func moveDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/multilinetextalignment(_:)",
                    "title" : "func multilineTextAlignment(TextAlignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbarbackbuttonhidden(_:)",
                    "title" : "func navigationBarBackButtonHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbarhidden(_:)",
                    "title" : "func navigationBarHidden(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:)-2bdzr",
                    "title" : "func navigationBarTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:)-4462",
                    "title" : "func navigationBarTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:)-ylvu",
                    "title" : "func navigationBarTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:displaymode:)-286zw",
                    "title" : "func navigationBarTitle<S>(S, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:displaymode:)-898x8",
                    "title" : "func navigationBarTitle(LocalizedStringKey, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationbartitle(_:displaymode:)-8xvmi",
                    "title" : "func navigationBarTitle(Text, displayMode: NavigationBarItem.TitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdestination(for:destination:)",
                    "title" : "func navigationDestination<D, C>(for: D.Type, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdestination(ispresented:destination:)",
                    "title" : "func navigationDestination<V>(isPresented: Binding<Bool>, destination: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdestination(item:destination:)",
                    "title" : "func navigationDestination<D, C>(item: Binding<Optional<D>>, destination: (D) -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdocument(_:)",
                    "title" : "func navigationDocument(URL) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdocument(_:preview:)-39i8g",
                    "title" : "func navigationDocument<D, I1, I2>(D, preview: SharePreview<I1, I2>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdocument(_:preview:)-42glv",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<I, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdocument(_:preview:)-4h85r",
                    "title" : "func navigationDocument<D>(D, preview: SharePreview<Never, Never>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationdocument(_:preview:)-9lupt",
                    "title" : "func navigationDocument<D, I>(D, preview: SharePreview<Never, I>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsplitviewcolumnwidth(_:)",
                    "title" : "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title" : "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsplitviewstyle(_:)",
                    "title" : "func navigationSplitViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsubtitle(_:)-2z7ez",
                    "title" : "func navigationSubtitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsubtitle(_:)-6hx47",
                    "title" : "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationsubtitle(_:)-6s3uw",
                    "title" : "func navigationSubtitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationtitle(_:)-36eg",
                    "title" : "func navigationTitle(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationtitle(_:)-43j11",
                    "title" : "func navigationTitle(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationtitle(_:)-6dhwz",
                    "title" : "func navigationTitle<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationtitle(_:)-9p461",
                    "title" : "func navigationTitle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationtitle(_:)-wszp",
                    "title" : "func navigationTitle(Binding<String>) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/navigationviewstyle(_:)",
                    "title" : "func navigationViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/offset(_:)",
                    "title" : "func offset(CGSize) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/offset(x:y:)",
                    "title" : "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onappear(perform:)",
                    "title" : "func onAppear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onchange(of:initial:_:)-2o5sk",
                    "title" : "func onChange<V>(of: V, initial: Bool, (V, V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onchange(of:initial:_:)-6bowf",
                    "title" : "func onChange<V>(of: V, initial: Bool, () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onchange(of:perform:)",
                    "title" : "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/oncommand(_:perform:)",
                    "title" : "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/oncontinueuseractivity(_:perform:)",
                    "title" : "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/oncontinuoushover(coordinatespace:perform:)",
                    "title" : "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/oncopycommand(perform:)",
                    "title" : "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/oncutcommand(perform:)",
                    "title" : "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondeletecommand(perform:)",
                    "title" : "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondisappear(perform:)",
                    "title" : "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrag(_:)",
                    "title" : "func onDrag(() -> NSItemProvider) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrag(_:preview:)",
                    "title" : "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:delegate:)-4vs9e",
                    "title" : "func onDrop(of: [UTType], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:delegate:)-ovv9",
                    "title" : "func onDrop(of: [String], delegate: any DropDelegate) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:istargeted:perform:)-1zk07",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:istargeted:perform:)-5egn5",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:istargeted:perform:)-5jbid",
                    "title" : "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ondrop(of:istargeted:perform:)-899e0",
                    "title" : "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onexitcommand(perform:)",
                    "title" : "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onhover(perform:)",
                    "title" : "func onHover(perform: (Bool) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onkeypress(_:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, action: () -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onkeypress(_:phases:action:)",
                    "title" : "func onKeyPress(KeyEquivalent, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onkeypress(characters:phases:action:)",
                    "title" : "func onKeyPress(characters: CharacterSet, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onkeypress(keys:phases:action:)",
                    "title" : "func onKeyPress(keys: Set<KeyEquivalent>, phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onkeypress(phases:action:)",
                    "title" : "func onKeyPress(phases: KeyPress.Phases, action: (KeyPress) -> KeyPress.Result) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title" : "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onmovecommand(perform:)",
                    "title" : "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onopenurl(perform:)",
                    "title" : "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpastecommand(of:perform:)-19lg8",
                    "title" : "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpastecommand(of:perform:)-6xij3",
                    "title" : "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpastecommand(of:validator:perform:)-1zto5",
                    "title" : "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpastecommand(of:validator:perform:)-7nd6a",
                    "title" : "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpencildoubletap(perform:)",
                    "title" : "func onPencilDoubleTap(perform: (PencilDoubleTapGestureValue) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpencilsqueeze(perform:)",
                    "title" : "func onPencilSqueeze(perform: (PencilSqueezeGesturePhase) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onplaypausecommand(perform:)",
                    "title" : "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onpreferencechange(_:perform:)",
                    "title" : "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onreceive(_:perform:)",
                    "title" : "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/onsubmit(of:_:)",
                    "title" : "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ontapgesture(count:coordinatespace:perform:)",
                    "title" : "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/ontapgesture(count:perform:)",
                    "title" : "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/opacity(_:)",
                    "title" : "func opacity(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlay(_:alignment:)",
                    "title" : "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlay(_:ignoressafeareaedges:)",
                    "title" : "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlay(_:in:fillstyle:)",
                    "title" : "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlay(alignment:content:)",
                    "title" : "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlaypreferencevalue(_:_:)",
                    "title" : "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/overlaypreferencevalue(_:alignment:_:)",
                    "title" : "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/padding(_:)-1qt7c",
                    "title" : "func padding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/padding(_:)-tayz",
                    "title" : "func padding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/padding(_:_:)",
                    "title" : "func padding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/pagecommand(value:in:step:)",
                    "title" : "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/paletteselectioneffect(_:)",
                    "title" : "func paletteSelectionEffect(PaletteSelectionEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/pastedestination(for:action:validator:)",
                    "title" : "func pasteDestination<T>(for: T.Type, action: ([T]) -> Void, validator: ([T]) -> [T]) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/persistentsystemoverlays(_:)",
                    "title" : "func persistentSystemOverlays(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/phaseanimator(_:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/phaseanimator(_:trigger:content:animation:)",
                    "title" : "func phaseAnimator<Phase>(some Sequence, trigger: some Equatable, content: (PlaceholderContentView<Self>, Phase) -> some View, animation: (Phase) -> Animation?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/pickerstyle(_:)",
                    "title" : "func pickerStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title" : "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/position(_:)",
                    "title" : "func position(CGPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/position(x:y:)",
                    "title" : "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/preference(key:value:)",
                    "title" : "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/preferredcolorscheme(_:)",
                    "title" : "func preferredColorScheme(ColorScheme?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/prefersdefaultfocus(_:in:)",
                    "title" : "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationbackground(_:)",
                    "title" : "func presentationBackground<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationbackground(alignment:content:)",
                    "title" : "func presentationBackground<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationbackgroundinteraction(_:)",
                    "title" : "func presentationBackgroundInteraction(PresentationBackgroundInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationcompactadaptation(_:)",
                    "title" : "func presentationCompactAdaptation(PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationcompactadaptation(horizontal:vertical:)",
                    "title" : "func presentationCompactAdaptation(horizontal: PresentationAdaptation, vertical: PresentationAdaptation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationcontentinteraction(_:)",
                    "title" : "func presentationContentInteraction(PresentationContentInteraction) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationcornerradius(_:)",
                    "title" : "func presentationCornerRadius(CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationdetents(_:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationdetents(_:selection:)",
                    "title" : "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentationdragindicator(_:)",
                    "title" : "func presentationDragIndicator(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentedwindowstyle(_:)",
                    "title" : "func presentedWindowStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/presentedwindowtoolbarstyle(_:)",
                    "title" : "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/previewcontext(_:)",
                    "title" : "func previewContext<C>(C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/previewdevice(_:)",
                    "title" : "func previewDevice(PreviewDevice?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/previewdisplayname(_:)",
                    "title" : "func previewDisplayName(String?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/previewinterfaceorientation(_:)",
                    "title" : "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/previewlayout(_:)",
                    "title" : "func previewLayout(PreviewLayout) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/privacysensitive(_:)",
                    "title" : "func privacySensitive(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/progressviewstyle(_:)",
                    "title" : "func progressViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/projectioneffect(_:)",
                    "title" : "func projectionEffect(ProjectionTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/redacted(reason:)",
                    "title" : "func redacted(reason: RedactionReasons) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/refreshable(action:)",
                    "title" : "func refreshable(action: () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/renameaction(_:)-6k96",
                    "title" : "func renameAction(() -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/renameaction(_:)-6kprb",
                    "title" : "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title" : "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/rotationeffect(_:anchor:)",
                    "title" : "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/safeareainset(edge:alignment:spacing:content:)-1e8n0",
                    "title" : "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/safeareainset(edge:alignment:spacing:content:)-9a70p",
                    "title" : "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/safeareapadding(_:)-4v1fw",
                    "title" : "func safeAreaPadding(EdgeInsets) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/safeareapadding(_:)-9npbz",
                    "title" : "func safeAreaPadding(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/safeareapadding(_:_:)",
                    "title" : "func safeAreaPadding(Edge.Set, CGFloat?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/saturation(_:)",
                    "title" : "func saturation(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scaleeffect(_:anchor:)-9g70u",
                    "title" : "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scaleeffect(_:anchor:)-aop0",
                    "title" : "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scaleeffect(x:y:anchor:)",
                    "title" : "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scaledtofill()",
                    "title" : "func scaledToFill() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scaledtofit()",
                    "title" : "func scaledToFit() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scenepadding(_:)",
                    "title" : "func scenePadding(Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scenepadding(_:edges:)",
                    "title" : "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollbouncebehavior(_:axes:)",
                    "title" : "func scrollBounceBehavior(ScrollBounceBehavior, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollclipdisabled(_:)",
                    "title" : "func scrollClipDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollcontentbackground(_:)",
                    "title" : "func scrollContentBackground(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolldisabled(_:)",
                    "title" : "func scrollDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolldismisseskeyboard(_:)",
                    "title" : "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollindicators(_:axes:)",
                    "title" : "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollindicatorsflash(onappear:)",
                    "title" : "func scrollIndicatorsFlash(onAppear: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollindicatorsflash(trigger:)",
                    "title" : "func scrollIndicatorsFlash(trigger: some Equatable) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrollposition(id:anchor:)",
                    "title" : "func scrollPosition(id: Binding<(some Hashable)?>, anchor: UnitPoint?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolltargetbehavior(_:)",
                    "title" : "func scrollTargetBehavior(some ScrollTargetBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolltargetlayout(isenabled:)",
                    "title" : "func scrollTargetLayout(isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolltransition(_:axis:transition:)",
                    "title" : "func scrollTransition(ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/scrolltransition(topleading:bottomtrailing:axis:transition:)",
                    "title" : "func scrollTransition(topLeading: ScrollTransitionConfiguration, bottomTrailing: ScrollTransitionConfiguration, axis: Axis?, transition: (EmptyVisualEffect, ScrollTransitionPhase) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchcompletion(_:)",
                    "title" : "func searchCompletion(String) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchpresentationtoolbarbehavior(_:)",
                    "title" : "func searchPresentationToolbarBehavior(SearchPresentationToolbarBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchscopes(_:activation:_:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, activation: SearchScopeActivation, () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchscopes(_:scopes:)",
                    "title" : "func searchScopes<V, S>(Binding<V>, scopes: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchsuggestions(_:)",
                    "title" : "func searchSuggestions<S>(() -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchsuggestions(_:for:)",
                    "title" : "func searchSuggestions(Visibility, for: SearchSuggestionsPlacement.Set) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-2ak34",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-7uhmb",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:ispresented:placement:prompt:token:)-qefj",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:placement:prompt:token:)-32n3f",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:placement:prompt:token:)-3r3mp",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:editabletokens:placement:prompt:token:)-3y3vq",
                    "title" : "func searchable<C>(text: Binding<String>, editableTokens: Binding<C>, placement: SearchFieldPlacement, prompt: some StringProtocol, token: (Binding<C.Element>) -> some View) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:ispresented:placement:prompt:)-675uj",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:ispresented:placement:prompt:)-6khss",
                    "title" : "func searchable<S>(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:ispresented:placement:prompt:)-9nffh",
                    "title" : "func searchable(text: Binding<String>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:)-4bque",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:)-7ds9d",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:)-7eeot",
                    "title" : "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:suggestions:)-1suxb",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:suggestions:)-6tewv",
                    "title" : "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "deprecated" : true,
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:placement:prompt:suggestions:)-7x8zm",
                    "title" : "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-35ao0",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-4wdtz",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:ispresented:placement:prompt:token:)-6ea2w",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:placement:prompt:token:)-5rku1",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:placement:prompt:token:)-7a2h4",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:placement:prompt:token:)-st42",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-2kifk",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-6czwk",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:ispresented:placement:prompt:token:)-7yju0",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, isPresented: Binding<Bool>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2n5d5",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-33piw",
                    "title" : "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-3jn0g",
                    "title" : "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/selectiondisabled(_:)",
                    "title" : "func selectionDisabled(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/sensoryfeedback(_:trigger:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/sensoryfeedback(_:trigger:condition:)",
                    "title" : "func sensoryFeedback<T>(SensoryFeedback, trigger: T, condition: (T, T) -> Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/sensoryfeedback(trigger:_:)",
                    "title" : "func sensoryFeedback<T>(trigger: T, (T, T) -> SensoryFeedback?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/shadow(color:radius:x:y:)",
                    "title" : "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/sheet(ispresented:ondismiss:content:)",
                    "title" : "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/sheet(item:ondismiss:content:)",
                    "title" : "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/simultaneousgesture(_:including:)",
                    "title" : "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/speechadjustedpitch(_:)",
                    "title" : "func speechAdjustedPitch(Double) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/speechalwaysincludespunctuation(_:)",
                    "title" : "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/speechannouncementsqueued(_:)",
                    "title" : "func speechAnnouncementsQueued(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/speechspellsoutcharacters(_:)",
                    "title" : "func speechSpellsOutCharacters(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/springloadingbehavior(_:)",
                    "title" : "func springLoadingBehavior(SpringLoadingBehavior) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/strikethrough(_:pattern:color:)",
                    "title" : "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/submitlabel(_:)",
                    "title" : "func submitLabel(SubmitLabel) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/submitscope(_:)",
                    "title" : "func submitScope(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title" : "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/symboleffect(_:options:isactive:)",
                    "title" : "func symbolEffect<T>(T, options: SymbolEffectOptions, isActive: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/symboleffect(_:options:value:)",
                    "title" : "func symbolEffect<T, U>(T, options: SymbolEffectOptions, value: U) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/symboleffectsremoved(_:)",
                    "title" : "func symbolEffectsRemoved(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/symbolrenderingmode(_:)",
                    "title" : "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/symbolvariant(_:)",
                    "title" : "func symbolVariant(SymbolVariants) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tabitem(_:)",
                    "title" : "func tabItem<V>(() -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tabviewstyle(_:)",
                    "title" : "func tabViewStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tablecolumnheaders(_:)",
                    "title" : "func tableColumnHeaders(Visibility) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tablestyle(_:)",
                    "title" : "func tableStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tag(_:)",
                    "title" : "func tag<V>(V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/task(id:priority:_:)",
                    "title" : "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/task(priority:_:)",
                    "title" : "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/textcase(_:)",
                    "title" : "func textCase(Text.Case?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/textcontenttype(_:)",
                    "title" : "func textContentType(NSTextContentType?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/texteditorstyle(_:)",
                    "title" : "func textEditorStyle(some TextEditorStyle) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/textfieldstyle(_:)",
                    "title" : "func textFieldStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/textscale(_:isenabled:)",
                    "title" : "func textScale(Text.Scale, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/textselection(_:)",
                    "title" : "func textSelection<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tint(_:)",
                    "title" : "func tint(Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/togglestyle(_:)",
                    "title" : "func toggleStyle<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbar(_:for:)",
                    "title" : "func toolbar(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbar(content:)-4zhec",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbar(content:)-9h9km",
                    "title" : "func toolbar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbar(id:content:)",
                    "title" : "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbar(removing:)",
                    "title" : "func toolbar(removing: ToolbarDefaultItemKind?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbarbackground(_:for:)",
                    "title" : "func toolbarBackground(Visibility, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbarcolorscheme(_:for:)",
                    "title" : "func toolbarColorScheme(ColorScheme?, for: ToolbarPlacement...) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbarrole(_:)",
                    "title" : "func toolbarRole(ToolbarRole) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbartitledisplaymode(_:)",
                    "title" : "func toolbarTitleDisplayMode(ToolbarTitleDisplayMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/toolbartitlemenu(content:)",
                    "title" : "func toolbarTitleMenu<C>(content: () -> C) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/touchbar(_:)",
                    "title" : "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/touchbar(content:)",
                    "title" : "func touchBar<Content>(content: () -> Content) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/touchbarcustomizationlabel(_:)",
                    "title" : "func touchBarCustomizationLabel(Text) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/touchbaritempresence(_:)",
                    "title" : "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/touchbaritemprincipal(_:)",
                    "title" : "func touchBarItemPrincipal(Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/tracking(_:)",
                    "title" : "func tracking(CGFloat) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transaction(_:)",
                    "title" : "func transaction((inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transaction(_:body:)",
                    "title" : "func transaction<V>((inout Transaction) -> Void, body: (PlaceholderContentView<Self>) -> V) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transaction(value:_:)",
                    "title" : "func transaction(value: some Equatable, (inout Transaction) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transformanchorpreference(key:value:transform:)",
                    "title" : "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transformeffect(_:)",
                    "title" : "func transformEffect(CGAffineTransform) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transformenvironment(_:transform:)",
                    "title" : "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transformpreference(_:_:)",
                    "title" : "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/transition(_:)",
                    "title" : "func transition(AnyTransition) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/truncationmode(_:)",
                    "title" : "func truncationMode(Text.TruncationMode) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/typeselectequivalent(_:)-3jcse",
                    "title" : "func typeSelectEquivalent(LocalizedStringKey) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/typeselectequivalent(_:)-4ku5y",
                    "title" : "func typeSelectEquivalent<S>(S) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/typeselectequivalent(_:)-9jzds",
                    "title" : "func typeSelectEquivalent(Text?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/typesettinglanguage(_:isenabled:)-40lng",
                    "title" : "func typesettingLanguage(TypesettingLanguage, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/typesettinglanguage(_:isenabled:)-9f02t",
                    "title" : "func typesettingLanguage(Locale.Language, isEnabled: Bool) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/underline(_:pattern:color:)",
                    "title" : "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/unredacted()",
                    "title" : "func unredacted() -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/useractivity(_:element:_:)",
                    "title" : "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/useractivity(_:isactive:_:)",
                    "title" : "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/visualeffect(_:)",
                    "title" : "func visualEffect((EmptyVisualEffect, GeometryProxy) -> some VisualEffect) -> some View",
                    "type" : "method"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketstatusview\/zindex(_:)",
                    "title" : "func zIndex(Double) -> some View",
                    "type" : "method"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/websocketstatusview\/view-implementations",
                "title" : "View Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/websocketstatusview",
            "title" : "WebSocketStatusView",
            "type" : "struct"
          },
          {
            "title" : "Previews",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/meetingnotesdocumentview_previews",
            "title" : "MeetingNotesDocumentView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/editableagendaitemlistview_previews",
            "title" : "EditableAgendaItemListView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/peerbrowserview_previews",
            "title" : "PeerBrowserView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/mergeview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/mergeview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/mergeview_previews",
            "title" : "MergeView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/syncview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/syncview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/syncview_previews",
            "title" : "SyncView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/exportview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/exportview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/exportview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/exportview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/exportview_previews",
            "title" : "ExportView_Previews",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/websocketview_previews\/init()",
                "title" : "init()",
                "type" : "init"
              },
              {
                "title" : "Type Properties",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/websocketview_previews\/previews",
                "title" : "static var previews: some View",
                "type" : "property"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Type Properties",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/websocketview_previews\/platform",
                    "title" : "static var platform: PreviewPlatform?",
                    "type" : "property"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/websocketview_previews\/previewprovider-implementations",
                "title" : "PreviewProvider Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/websocketview_previews",
            "title" : "WebSocketView_Previews",
            "type" : "struct"
          },
          {
            "title" : "Application Resources",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/colorresource\/init(name:bundle:)",
                "title" : "init(name: Swift.String, bundle: Foundation.Bundle)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/colorresource\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/colorresource\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/colorresource",
            "title" : "ColorResource",
            "type" : "struct"
          },
          {
            "children" : [
              {
                "title" : "Initializers",
                "type" : "groupMarker"
              },
              {
                "path" : "\/documentation\/meetingnotes\/imageresource\/init(name:bundle:)",
                "title" : "init(name: Swift.String, bundle: Foundation.Bundle)",
                "type" : "init"
              },
              {
                "title" : "Default Implementations",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Operators",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/imageresource\/!=(_:_:)",
                    "title" : "static func != (Self, Self) -> Bool",
                    "type" : "op"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/imageresource\/equatable-implementations",
                "title" : "Equatable Implementations",
                "type" : "symbol"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/imageresource",
            "title" : "ImageResource",
            "type" : "struct"
          },
          {
            "title" : "Extended Modules",
            "type" : "groupMarker"
          },
          {
            "children" : [
              {
                "title" : "Extended Classes",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/appkit\/nscolor\/init(resource:)",
                    "title" : "init(resource: ColorResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/appkit\/nscolor",
                "title" : "NSColor",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/appkit",
            "title" : "AppKit",
            "type" : "extension"
          },
          {
            "children" : [
              {
                "title" : "Extended Structures",
                "type" : "groupMarker"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/swiftui\/color\/init(_:)",
                    "title" : "init(ColorResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/swiftui\/color",
                "title" : "Color",
                "type" : "extension"
              },
              {
                "children" : [
                  {
                    "title" : "Initializers",
                    "type" : "groupMarker"
                  },
                  {
                    "path" : "\/documentation\/meetingnotes\/swiftui\/image\/init(_:)",
                    "title" : "init(ImageResource)",
                    "type" : "init"
                  }
                ],
                "path" : "\/documentation\/meetingnotes\/swiftui\/image",
                "title" : "Image",
                "type" : "extension"
              }
            ],
            "path" : "\/documentation\/meetingnotes\/swiftui",
            "title" : "SwiftUI",
            "type" : "extension"
          }
        ],
        "path" : "\/documentation\/meetingnotes",
        "title" : "MeetingNotes",
        "type" : "module"
      }
    ]
  },
  "schemaVersion" : {
    "major" : 0,
    "minor" : 1,
    "patch" : 1
  }
}