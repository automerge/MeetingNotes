{
  "abstract" : [
    {
      "text" : "A guided tour of MeetingNotes, a sample iOS and macOS SwiftUI app that uses Automerge for data storage and collaboration.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/AppWalkthrough"
  },
  "kind" : "article",
  "metadata" : {
    "modules" : [
      {
        "name" : "MeetingNotes"
      }
    ],
    "role" : "article",
    "roleHeading" : "Article",
    "title" : "Meeting Notes, a Document-based SwiftUI app using Automerge"
  },
  "primaryContentSections" : [
    {
      "content" : [
        {
          "anchor" : "Overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The source for the MeetingNotes app is ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Document-based SwiftUI app illustrates storing and loading a ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " model and integrating that Automerge-backed model with SwiftUI controls.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The example supports merging files with offline updates and interactive peer-to-peer syncing in near real time.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Using-Automerge-in-a-Document-based-app",
          "level" : 3,
          "text" : "Using Automerge in a Document-based app",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "MeetingNotes is a document-based SwiftUI app, meaning that it defines a file type, reads and edits files stored on device, focusing on a document to store relevant information.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesDocument.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " contains the core code to support a Document-based SwiftUI app.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The file type that the MeetingNotes defines in the ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : " file is matched in code as an extension on Universal Type Identifier, ",
              "type" : "text"
            },
            {
              "code" : "com.github.automerge.meetingnotes",
              "type" : "codeVoice"
            },
            {
              "text" : ":",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "extension UTType {",
            "    \/\/\/ An Automerge document that is CBOR encoded with ",
            "    \/\/\/ a document identifier.",
            "    static var meetingnote: UTType {",
            "        UTType(exportedAs: \"com.github.automerge.meetingnotes\")",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "Info.plist",
              "type" : "codeVoice"
            },
            {
              "text" : " file defines the type that the app exports with a file extension ",
              "type" : "text"
            },
            {
              "code" : ".meetingnotes",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The app’s type conforms to the more general Uniform Type Identifiers of ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551481-content",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551482-data",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "MeetingNotes doesn’t use the raw bytes that an Automerge document provides for the file format.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead it wraps those bytes to track a unique document identifier created with any new document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Tracking a unique document identifier provides MeetingNotes with a convenient way to determine if two documents are copies of the same document, or if they were generated independently.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "While Automerge supports consistently merging any two document structures, the seamless updates of changes between copies relies on the documents having a shared based history.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Merging two documents that don’t share a common history can result in unexpected, although consistent, merge results.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "MeetingNotes uses the document identifier to constrain the documents it merges or synchronizes with.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "MeetingNotes uses the Codable struct ",
              "type" : "text"
            },
            {
              "code" : "WrappedAutomergeDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " to attach the document identifier and encodes it with ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/cbor.io",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The CBOR encoding and decoding is provided by the dependency ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/swiftpackageindex.com\/outfoxx\/PotentCodables",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "struct WrappedAutomergeDocument: Codable {",
            "    let id: UUID",
            "    let data: Data",
            "    static let fileEncoder = CBOREncoder()",
            "    static let fileDecoder = CBORDecoder()",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Document-based SwiftUI apps expect you to use either a subclass of  ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/filedocument",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " or ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/referencefiledocument",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "MeetingNotes defines ",
              "type" : "text"
            },
            {
              "code" : "MeetingNotesDocument",
              "type" : "codeVoice"
            },
            {
              "text" : ", a subclass of ",
              "type" : "text"
            },
            {
              "code" : "ReferenceFileDocument",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the create-a-new-document initializer (",
              "type" : "text"
            },
            {
              "code" : "init()",
              "type" : "codeVoice"
            },
            {
              "text" : "), MeetingNotes creates a new Automerge document along with a new document identifier.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The initializer continues and creates a new, empty model instance and seeds the schema of the model into the Automerge document using ",
              "type" : "text"
            },
            {
              "code" : "AutomergeEncoder",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "init() {",
            "    id = UUID()",
            "    doc = Document()",
            "    let newModel = MeetingNotesModel(title: \"Untitled\")",
            "    model = newModel",
            "    modelEncoder = AutomergeEncoder(doc: doc, strategy: .createWhenNeeded)",
            "    modelDecoder = AutomergeDecoder(doc: doc)",
            "",
            "    do {",
            "        \/\/ Establish the schema in the new Automerge document by ",
            "        \/\/ encoding the model.",
            "        try modelEncoder.encode(newModel)",
            "    } catch {",
            "        fatalError(error.localizedDescription)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In the read-a-document-from-data initializer (",
              "type" : "text"
            },
            {
              "code" : "init(configuration: ReadConfiguration)",
              "type" : "codeVoice"
            },
            {
              "text" : "), MeetingNotes attempts to decode the wrapper from the bytes provided by the system, followed by initializing an Automerge document with the bytes embedded within the wrapped document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If this process succeeds, the initializer uses ",
              "type" : "text"
            },
            {
              "code" : "AutomergeDecoder",
              "type" : "codeVoice"
            },
            {
              "text" : " to decode an instance of the model from the Automerge document.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "required init(configuration: ReadConfiguration) throws {",
            "    guard let filedata = configuration.file.regularFileContents",
            "    else {",
            "        Logger.document.error(",
            "            \"Opened file \\(String(describing: configuration.file.filename), privacy: .public) has no associated data.\"",
            "        )",
            "        throw CocoaError(.fileReadCorruptFile)",
            "    }",
            "",
            "    \/\/ The binary format of the document is a CBOR encoded file. The goal ",
            "    \/\/ being to wrap the raw automerge document serialization with an ",
            "    \/\/ 'envelope' that includes an origin ID, so that an application can ",
            "    \/\/ know if the document stemmed from the same original source or if ",
            "    \/\/ they're entirely independent.",
            "    let wrappedDocument = try fileDecoder.decode(",
            "        WrappedAutomergeDocument.self, ",
            "        from: filedata)",
            "",
            "    \/\/ Set the identifier of this document.",
            "    id = wrappedDocument.id",
            "",
            "    \/\/ Deserialize the Automerge document from the wrappers data.",
            "    doc = try Document(wrappedDocument.data)",
            "",
            "    modelEncoder = AutomergeEncoder(doc: doc, strategy: .createWhenNeeded)",
            "    modelDecoder = AutomergeDecoder(doc: doc)",
            "    do {",
            "        model = try modelDecoder.decode(MeetingNotesModel.self)",
            "    } catch {",
            "        Logger.document.error(\"error: \\(error, privacy: .public)\")",
            "        fatalError()",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The required save-the-document method (",
              "type" : "text"
            },
            {
              "code" : "snapshot(contentType _: UTType)",
              "type" : "codeVoice"
            },
            {
              "text" : ") encodes any updates from the model back into the Automerge document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "SwiftUI calls this method at different times, depending on the app platform.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "On macOS, it is invoked when the person using MeetingNotes uses “save” through the menu or keyboard shortcut.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "However, on iOS, the method is invoked automatically, driven by notifying the UndoManager to let the system know the Document is dirty and an update can be saved.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func snapshot(contentType _: UTType) throws -> Document {",
            "    try modelEncoder.encode(model)",
            "    return doc",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The snapshot, in turn, is used by ",
              "type" : "text"
            },
            {
              "code" : "fileWrapper(snapshot: Document, configuration _: WriteConfiguration)",
              "type" : "codeVoice"
            },
            {
              "text" : " to create a new wrapped document with the updated bytes, and serializes the wrapped document to provide the final bytes to store on device.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func fileWrapper(",
            "    snapshot: Document, ",
            "    configuration _: WriteConfiguration) throws -> FileWrapper {",
            "    \/\/ Using the updated Automerge document returned from snapshot, create",
            "    \/\/ a wrapper with the origin ID from the serialized automerge file.",
            "    let wrappedDocument = WrappedAutomergeDocument(",
            "        id: id, ",
            "        data: snapshot.save())",
            "",
            "    \/\/ Encode that wrapper using CBOR encoding",
            "    let filedata = try fileEncoder.encode(wrappedDocument)",
            "",
            "    \/\/ And hand that file to the FileWrapper for the operating system ",
            "    \/\/ to save, transfer, etc.",
            "    let fileWrapper = FileWrapper(regularFileWithContents: filedata)",
            "    return fileWrapper",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The Document subclass defines two additional helper methods: ",
              "type" : "text"
            },
            {
              "code" : "storeModelUpdates()",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "getModelUpdates()",
              "type" : "codeVoice"
            },
            {
              "text" : " to provide a convenient interface point for changes to the Automerge document from synchronization, merging files, or updates to from SwiftUI views.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "\/\/\/ Updates the Automerge document with the current value from the model.",
            "func storeModelUpdates() throws {",
            "    try modelEncoder.encode(model)",
            "    self.objectWillChange.send()",
            "}",
            "",
            "\/\/\/ Updates the model document with any changed values in the ",
            "\/\/\/ Automerge document.",
            "func getModelUpdates() throws {",
            "    \/\/ Logger.document.debug(\"Updating model from Automerge document.\")",
            "    model = try modelDecoder.decode(MeetingNotesModel.self)",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "For more information on building document-based app with SwiftUI, see ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/building_a_document-based_app_with_swiftui",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Encoding-and-Decoding-the-model",
          "level" : 3,
          "text" : "Encoding and Decoding the model",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The model used in the app is defined in ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesModel.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The top level of the model exposes a ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " struct that includes ",
              "type" : "text"
            },
            {
              "code" : "title",
              "type" : "codeVoice"
            },
            {
              "text" : " and a list of ",
              "type" : "text"
            },
            {
              "code" : "AgendaItem",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "AgendaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " is another ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " struct that includes a ",
              "type" : "text"
            },
            {
              "code" : "title",
              "type" : "codeVoice"
            },
            {
              "text" : " and an instance of ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This model illustrates the Codable encoding of both structs and arrays, as well as the special Automerge type ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : ", which dynamically reads and updates values from text objects within an Automerge document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "For any updates to the model ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "other",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " than the text updates, the app calls ",
              "type" : "text"
            },
            {
              "code" : "storeModelUpdates()",
              "type" : "codeVoice"
            },
            {
              "text" : " on the instance of ",
              "type" : "text"
            },
            {
              "code" : "ModelNotesDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " to use an ",
              "type" : "text"
            },
            {
              "code" : "AutomergeEncoder",
              "type" : "codeVoice"
            },
            {
              "text" : " to write the updates back into the Automerge ",
              "type" : "text"
            },
            {
              "code" : "Document",
              "type" : "codeVoice"
            },
            {
              "text" : " instance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Integrating-with-SwiftUI-Controls-and-Views",
          "level" : 3,
          "text" : "Integrating with SwiftUI Controls and Views",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The primary content view for the app is provided by ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MeetingNotesDocumentView.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This view defines a two-column (list and detail) split view using ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/navigationsplitview",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The view contains a property ",
              "type" : "text"
            },
            {
              "code" : "document",
              "type" : "codeVoice"
            },
            {
              "text" : ", that references the ",
              "type" : "text"
            },
            {
              "code" : "MeetingNotesDocument",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "document",
              "type" : "codeVoice"
            },
            {
              "text" : " property is used in the view to display the overall document title as an editable field:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "TextField(\"Meeting Title\", text: $document.model.title)",
            "    .onSubmit {",
            "        undoManager?.registerUndo(withTarget: document) { _ in }",
            "        updateDoc()",
            "    }"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "On any updates to that field, the view notifies the Undo manager that a change has happened and calls ",
              "type" : "text"
            },
            {
              "code" : "storeModelUpdates()",
              "type" : "codeVoice"
            },
            {
              "text" : " on the document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The Undo manager isn’t used to build up a queue of changes to be reversed.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Instead it is a means to notify the document-based app framework that a change occurred, so that it can mark the document as dirty.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the macOS app, this provides a visual affordance to let the person using the app know that the document has been updated and can be saved.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In the iOS app, the framework automatically saves the document.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "This main document view also provides a list of the ",
              "type" : "text"
            },
            {
              "code" : "AgendaItem",
              "type" : "codeVoice"
            },
            {
              "text" : " instances, includes a button to add new one, and each has a contextual menu option to delete it.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The detail view is provided by ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/EditableAgendaItemView.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Like the main document view, it maintains a reference to ",
              "type" : "text"
            },
            {
              "code" : "MeetingNotesDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " as the property ",
              "type" : "text"
            },
            {
              "code" : "document. The view maintains its own ",
              "type" : "codeVoice"
            },
            {
              "text" : "@State",
              "type" : "text"
            },
            {
              "code" : "value for an agenda item's title. The view is passed a unique, stable identifier for each agenda item, which it uses to handle selection from the list view, using",
              "type" : "codeVoice"
            },
            {
              "text" : "id()` to identify the detail view to make sure it updates when a selection changes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The view sets its state using ",
              "type" : "text"
            },
            {
              "code" : ".onAppear()",
              "type" : "codeVoice"
            },
            {
              "text" : ", and is refreshed when the view sees an update to the Document’s ",
              "type" : "text"
            },
            {
              "code" : "objectWillChange",
              "type" : "codeVoice"
            },
            {
              "text" : " publisher.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".onAppear(perform: {",
            "    if let indexPosition = document.model.agendas.firstIndex(",
            "        where: { $0.id == agendaItemId }) {",
            "        agendaTitle = document.model.agendas[indexPosition].title",
            "    }",
            "})",
            ".onReceive(document.objectWillChange, perform: { _ in",
            "    if let indexPosition = document.model.agendas.firstIndex(",
            "        where: { $0.id == agendaItemId }) {",
            "        agendaTitle = document.model.agendas[indexPosition].title",
            "    }",
            "})",
            ".onChange(of: agendaTitle, perform: { _ in",
            "    updateAgendaItemTitle()",
            "})"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "When the @State value of ",
              "type" : "text"
            },
            {
              "code" : "agendaTitle",
              "type" : "codeVoice"
            },
            {
              "text" : " changes, the view writes an updated value back to the Automerge document if the values of the state and document differ.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "private func updateAgendaItemTitle() {",
            "    var store = false",
            "    if let indexPosition = document.model.agendas.firstIndex(",
            "        where: { $0.id == agendaItemId }",
            "    ) {",
            "        if document.model.agendas[indexPosition].title != agendaTitle {",
            "            document.model.agendas[indexPosition].title = agendaTitle",
            "            store = true",
            "        }",
            "        \/\/ Encode the model back into the Automerge document if the ",
            "        \/\/ values changed.",
            "        if store {",
            "            do {",
            "                \/\/ Serialize the changes into the internal ",
            "                \/\/ Automerge document.",
            "                try document.storeModelUpdates()",
            "            } catch {",
            "                errorMsg = error.localizedDescription",
            "            }",
            "            \/\/ Registering an undo with even an empty handler for ",
            "            \/\/ re-do marks the associated document as 'dirty' and ",
            "            \/\/ causes SwiftUI to invoke a snapshot to save the file",
            "            \/\/ - at least on iOS.",
            "            undoManager?.registerUndo(withTarget: document) { _ in }",
            "        }",
            "    } ",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "discussion",
              "type" : "codeVoice"
            },
            {
              "text" : " property of an agenda item is linked to a binding provided by ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText.textBinding()",
              "type" : "codeVoice"
            },
            {
              "text" : ", the reference to the text instance looked up from the model using the agenda item’s identifier.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "TextEditor(text: bindingForAgendaItem())"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Each keystroke that updates the discussion is immediately written back to the Automerge document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By using the ",
              "type" : "text"
            },
            {
              "code" : "Binding<String>",
              "type" : "codeVoice"
            },
            {
              "text" : " vended from ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : ", the app directly reads and updates the view from changes to the Automerge document without having to rebuild the entire view.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func bindingForAgendaItem() -> Binding<String> {",
            "    if let indexPosition = document.model.agendas.firstIndex(",
            "        where: { $0.id == agendaItemId }",
            "    ) {",
            "        return document",
            "            .model",
            "            .agendas[indexPosition]",
            "            .discussion",
            "            .textBinding()",
            "    } else {",
            "        return .constant(\"\")",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Model-Update-Patterns",
          "level" : 3,
          "text" : "Model Update Patterns",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This example app shows two different patterns of working with data stored within Automerge.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The first uses ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " value types, which sets an expectation of decoding the model to read from Automerge, and encoding the model to store any updates.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This pattern is reasonably fast, but does update the entire model - and doing so triggers SwiftUI view rebuilds when those value types are updated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "On a broad scale, this may be inconvenient or untenable for app performance.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The second pattern leverages ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : ", but does so with a special reference type that provides a reference that directly reads from and writes to the Automerge document.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "By using a ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " reference type, the app can leverage the capability of ",
              "type" : "text"
            },
            {
              "code" : "AutomergeEncoder",
              "type" : "codeVoice"
            },
            {
              "text" : " to establish the needed objects within a new Automerge document, effecting “seeding the schema”.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Beyond that, it is the reposibility of the ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : " object to notify of changes to ensure SwiftUI views are refreshed as appropriate.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "The ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : " source provides an example of how you can structure your own reference types to achieve this sort of performance, if that need is critical to you.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In practice, doing this extra work correlates well to wanting to expose live-collaboration capabilities, where one or more people are doing frequent updates and the documents are likewise frequently synchronizing.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "In MeetingNotes, by using a ",
              "type" : "text"
            },
            {
              "code" : "Codable",
              "type" : "codeVoice"
            },
            {
              "text" : " reference type of ",
              "type" : "text"
            },
            {
              "code" : "AutomergeText",
              "type" : "codeVoice"
            },
            {
              "text" : ", the app gets a notable performance increase when collaboratively editing a ",
              "type" : "text"
            },
            {
              "code" : "discussion",
              "type" : "codeVoice"
            },
            {
              "text" : " property while live-syncing with another peer.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "anchor" : "Merging-documents",
          "level" : 3,
          "text" : "Merging documents",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "The main app view includes a toolbar button displaying ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MergeView.swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "MergeView",
              "type" : "codeVoice"
            },
            {
              "text" : " provides a button that uses ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/view\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " to attempt to load another instance of the MeetingNotes document type from device storage.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "This button illustrates how to seamlessly merge in updates from a copy made of the original document.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "Upon loading the document, it calls the helper method ",
              "type" : "text"
            },
            {
              "code" : "mergeDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " on ",
              "type" : "text"
            },
            {
              "code" : "MeetingNotesDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " to decode the document identifier, and if identical to the current document, merges any updates using ",
              "type" : "text"
            },
            {
              "code" : "Document.merge(other:)",
              "type" : "codeVoice"
            },
            {
              "text" : ".",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "func mergeFile(_ fileURL: URL) -> Result<Bool, Error> {",
            "    precondition(fileURL.isFileURL)",
            "    do {",
            "        let fileData = try Data(contentsOf: fileURL)",
            "        let newWrappedDocument = try fileDecoder.decode(",
            "            WrappedAutomergeDocument.self, ",
            "            from: fileData)",
            "        if newWrappedDocument.id != self.id {",
            "            throw MergeError.NoSharedHistory",
            "        }",
            "        let newAutomergeDoc = try Document(newWrappedDocument.data)",
            "        try doc.merge(other: newAutomergeDoc)",
            "        model = try modelDecoder.decode(MeetingNotesModel.self)",
            "        return .success(true)",
            "    } catch {",
            "        return .failure(error)",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "anchor" : "Syncing-Documents",
          "level" : 3,
          "text" : "Syncing Documents",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "With a document-based SwiftUI app, the SwiftUI app framework owns the lifetime of a ",
              "type" : "text"
            },
            {
              "code" : "ReferenceFileDocument",
              "type" : "codeVoice"
            },
            {
              "text" : " subclass.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "If the file saved from the document-based app is stored in iCloud, the operating system may destroy an existing instance and re-create it from the contents on device - most notably after having replicated the file with iCloud.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "There may be other instances of where the document can be rebuilt, but the important aspect to note is that SwiftUI is in control of that instance’s lifecycle.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "inlineContent" : [
            {
              "text" : "To provide peer to peer syncing, MeetingNotes uses the ",
              "type" : "text"
            },
            {
              "identifier" : "https:\/\/github.com\/automerge\/automerge-repo-swift",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ".",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "It creates a single globally available instance of a repository to track documents that are loaded by the SwiftUI document-based app.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "To provide the network connections, it also creates an instance of a ",
              "type" : "text"
            },
            {
              "code" : "WebSocketprovider",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "PeerToPeerProvider",
              "type" : "codeVoice"
            },
            {
              "text" : ", and adds those to the repository at the end of app initialization:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "public let repo = Repo(sharePolicy: SharePolicy.agreeable)",
            "public let websocket = WebSocketProvider(.init(reconnectOnError: true))",
            "public let peerToPeer = PeerToPeerProvider(",
            "    PeerToPeerProviderConfiguration(",
            "        passcode: \"AutomergeMeetingNotes\",",
            "        reconnectOnError: true,",
            "        autoconnect: false",
            "    )",
            ")",
            "",
            "\/\/\/ The document-based Meeting Notes application.",
            "@main",
            "struct MeetingNotesApp: App {",
            "    ...",
            "    init() {",
            "        Task {",
            "            \/\/ Enable network adapters",
            "            await repo.addNetworkAdapter(adapter: websocket)",
            "            await repo.addNetworkAdapter(adapter: peerToPeer)",
            "        }",
            "    }",
            "}",
            ""
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "The SwiftUI document-based API is all synchronous, so loading an Automerge document it provides is down within the view when it first appears.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            ".task {",
            "    \/\/ SwiftUI controls the lifecycle of MeetingNoteDocument instances,",
            "    \/\/ including sometimes regenerating them when disk contents are updated",
            "    \/\/ in the background, so register the current instance with the",
            "    \/\/ sync coordinator as they become visible.",
            "    do {",
            "        _ = try await repo.create(doc: document.doc, id: document.id)",
            "    } catch {",
            "        fatalError(\"Crashed loading the document: \\(error.localizedDescription)\")",
            "    }",
            "}"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Once added to the repository, toolbar buttons on the ",
              "type" : "text"
            },
            {
              "code" : "MeetingNotesDocumentView",
              "type" : "codeVoice"
            },
            {
              "text" : " toggle a WebSocket connection or activate the peer to peer networking.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "code" : "PeerSyncView",
              "type" : "codeVoice"
            },
            {
              "text" : " provides information about available peers on your local network, and allows you to explicitly connect to those peers.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "The repository handles syncing automatically as the Automerge document is updated.",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "Both the WebSocket and peer-to-peer networking implement the Automerge sync protocol over their respective transports.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "seeAlsoSections" : [
    {
      "generated" : true,
      "identifiers" : [
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/MeetingNotesModel",
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/AgendaItem",
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/MeetingNotesDocument",
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/WrappedAutomergeDocument",
        "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/UniformTypeIdentifiers\/UTType\/meetingnote"
      ],
      "title" : "Document Model"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/meetingnotes\/appwalkthrough"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes": {
  "abstract" : [
    {
      "text" : "An example iOS and macOS document-based application that uses Automerge as an underlying document store to synchronize and seamlessly merge documents.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "MeetingNotes",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes"
},
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes/AgendaItem": {
  "abstract" : [
    {
      "text" : "An individual agenda item tracked by meeting notes.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The ",
      "type" : "text"
    },
    {
      "code" : "discussion",
      "type" : "codeVoice"
    },
    {
      "text" : " property is the type ",
      "type" : "text"
    },
    {
      "code" : "Text",
      "type" : "codeVoice"
    },
    {
      "text" : " is from Automerge, and represents a collaboratively edited string.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "AgendaItem"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/AgendaItem",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "AgendaItem"
    }
  ],
  "role" : "symbol",
  "title" : "AgendaItem",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes\/agendaitem"
},
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes/MeetingNotesDocument": {
  "abstract" : [
    {
      "text" : "The concrete subclass of a reference-based file document.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MeetingNotesDocument"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/MeetingNotesDocument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MeetingNotesDocument"
    }
  ],
  "role" : "symbol",
  "title" : "MeetingNotesDocument",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes\/meetingnotesdocument"
},
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes/MeetingNotesModel": {
  "abstract" : [
    {
      "text" : "The top-level application model for Meeting Notes.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MeetingNotesModel"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/MeetingNotesModel",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MeetingNotesModel"
    }
  ],
  "role" : "symbol",
  "title" : "MeetingNotesModel",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes\/meetingnotesmodel"
},
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes/UniformTypeIdentifiers/UTType/meetingnote": {
  "abstract" : [
    {
      "text" : "An Automerge document that is CBOR encoded with a document identifier.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "static"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "meetingnote"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:22UniformTypeIdentifiers6UTTypeV",
      "text" : "UTType"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/UniformTypeIdentifiers\/UTType\/meetingnote",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "meetingnote",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes\/uniformtypeidentifiers\/uttype\/meetingnote"
},
"doc://com.automerge.MeetingNotes/documentation/MeetingNotes/WrappedAutomergeDocument": {
  "abstract" : [
    {
      "text" : "A CBOR encoded wrapper around a serialized Automerge document.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "struct"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "WrappedAutomergeDocument"
    }
  ],
  "identifier" : "doc:\/\/com.automerge.MeetingNotes\/documentation\/MeetingNotes\/WrappedAutomergeDocument",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "WrappedAutomergeDocument"
    }
  ],
  "role" : "symbol",
  "title" : "WrappedAutomergeDocument",
  "type" : "topic",
  "url" : "\/documentation\/meetingnotes\/wrappedautomergedocument"
},
"https://cbor.io": {
  "identifier" : "https:\/\/cbor.io",
  "title" : "CBOR encoding",
  "titleInlineContent" : [
    {
      "text" : "CBOR encoding",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/cbor.io"
},
"https://developer.apple.com/documentation/swiftui/building_a_document-based_app_with_swiftui": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/building_a_document-based_app_with_swiftui",
  "title" : "Building a Document-Based App with SwiftUI",
  "titleInlineContent" : [
    {
      "text" : "Building a Document-Based App with SwiftUI",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swiftui\/building_a_document-based_app_with_swiftui"
},
"https://developer.apple.com/documentation/swiftui/filedocument": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/filedocument",
  "title" : "FileDocument",
  "titleInlineContent" : [
    {
      "text" : "FileDocument",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swiftui\/filedocument"
},
"https://developer.apple.com/documentation/swiftui/navigationsplitview": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/navigationsplitview",
  "title" : "NavigationSplitView",
  "titleInlineContent" : [
    {
      "text" : "NavigationSplitView",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swiftui\/navigationsplitview"
},
"https://developer.apple.com/documentation/swiftui/referencefiledocument": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/referencefiledocument",
  "title" : "ReferenceFileDocument",
  "titleInlineContent" : [
    {
      "text" : "ReferenceFileDocument",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swiftui\/referencefiledocument"
},
"https://developer.apple.com/documentation/swiftui/view/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/swiftui\/view\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
  "title" : "fileImporter",
  "titleInlineContent" : [
    {
      "code" : "fileImporter",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/swiftui\/view\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)"
},
"https://developer.apple.com/documentation/uniformtypeidentifiers/uttype/3551481-content": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551481-content",
  "title" : "public.content",
  "titleInlineContent" : [
    {
      "code" : "public.content",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551481-content"
},
"https://developer.apple.com/documentation/uniformtypeidentifiers/uttype/3551482-data": {
  "identifier" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551482-data",
  "title" : "public.data",
  "titleInlineContent" : [
    {
      "code" : "public.data",
      "type" : "codeVoice"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/developer.apple.com\/documentation\/uniformtypeidentifiers\/uttype\/3551482-data"
},
"https://github.com/automerge/MeetingNotes": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes",
  "title" : "available on Github",
  "titleInlineContent" : [
    {
      "text" : "available on Github",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes"
},
"https://github.com/automerge/MeetingNotes/blob/main/MeetingNotes/MeetingNotesDocument.swift": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesDocument.swift",
  "title" : "MeetingNotesDocument.swift",
  "titleInlineContent" : [
    {
      "text" : "MeetingNotesDocument.swift",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesDocument.swift"
},
"https://github.com/automerge/MeetingNotes/blob/main/MeetingNotes/MeetingNotesModel.swift": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesModel.swift",
  "title" : "MeetingNotesModel.swift",
  "titleInlineContent" : [
    {
      "text" : "MeetingNotesModel.swift",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/MeetingNotesModel.swift"
},
"https://github.com/automerge/MeetingNotes/blob/main/MeetingNotes/Views/EditableAgendaItemView.swift": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/EditableAgendaItemView.swift",
  "title" : "EditableAgendaItemView",
  "titleInlineContent" : [
    {
      "text" : "EditableAgendaItemView",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/EditableAgendaItemView.swift"
},
"https://github.com/automerge/MeetingNotes/blob/main/MeetingNotes/Views/MeetingNotesDocumentView.swift": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MeetingNotesDocumentView.swift",
  "title" : "MeetingNotesDocumentView",
  "titleInlineContent" : [
    {
      "text" : "MeetingNotesDocumentView",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MeetingNotesDocumentView.swift"
},
"https://github.com/automerge/MeetingNotes/blob/main/MeetingNotes/Views/MergeView.swift": {
  "identifier" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MergeView.swift",
  "title" : "MergeView.swift",
  "titleInlineContent" : [
    {
      "text" : "MergeView.swift",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/MeetingNotes\/blob\/main\/MeetingNotes\/Views\/MergeView.swift"
},
"https://github.com/automerge/automerge-repo-swift": {
  "identifier" : "https:\/\/github.com\/automerge\/automerge-repo-swift",
  "title" : "automerge-repo-swift package",
  "titleInlineContent" : [
    {
      "text" : "automerge-repo-swift package",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/github.com\/automerge\/automerge-repo-swift"
},
"https://swiftpackageindex.com/outfoxx/PotentCodables": {
  "identifier" : "https:\/\/swiftpackageindex.com\/outfoxx\/PotentCodables",
  "title" : "PotentCodables",
  "titleInlineContent" : [
    {
      "text" : "PotentCodables",
      "type" : "text"
    }
  ],
  "type" : "link",
  "url" : "https:\/\/swiftpackageindex.com\/outfoxx\/PotentCodables"
}
}
}